<?xml version='1.0'?>
<signatures version='1.0'>
<struct type='{_CPTGradientElement=&quot;color&quot;{_CPTRGBAColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f&quot;alpha&quot;f}&quot;position&quot;f&quot;nextElement&quot;^{_CPTGradientElement}}' name='CPTGradientElement'>
<field declared_type='CPTRGBAColor' type='{_CPTRGBAColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f&quot;alpha&quot;f}' name='color'/>
<field declared_type='CGFloat' type='f' name='position'/>
<field declared_type='struct _CPTGradientElement*' type='^{_CPTGradientElement={_CPTRGBAColor=ffff}f^{_CPTGradientElement}}' name='nextElement'/>
</struct>
<struct type='{_CPTNumericDataType=&quot;dataTypeFormat&quot;i&quot;sampleBytes&quot;I&quot;byteOrder&quot;i}' name='CPTNumericDataType'>
<field declared_type='CPTDataTypeFormat' type='i' name='dataTypeFormat'/>
<field declared_type='size_t' type='L' name='sampleBytes'/>
<field declared_type='CFByteOrder' type='l' name='byteOrder'/>
</struct>
<struct type='{_CPTRGBAColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f&quot;alpha&quot;f}' name='CPTRGBAColor'>
<field declared_type='CGFloat' type='f' name='red'/>
<field declared_type='CGFloat' type='f' name='green'/>
<field declared_type='CGFloat' type='f' name='blue'/>
<field declared_type='CGFloat' type='f' name='alpha'/>
</struct>
<constant declared_type='NSString*' type='@' name='CPTBarPlotBindingBarBases' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTBarPlotBindingBarLocations' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTBarPlotBindingBarTips' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTDataException' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTException' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTGraphNeedsRedrawNotification' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTLegendNeedsLayoutForPlotNotification' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTLegendNeedsRedrawForPlotNotification' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTLegendNeedsReloadEntriesForPlotNotification' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTNumericDataException' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTPieChartBindingPieSliceWidthValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTPlotSpaceCoordinateMappingDidChangeNotification' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTRangePlotBindingHighValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTRangePlotBindingLeftValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTRangePlotBindingLowValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTRangePlotBindingRightValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTRangePlotBindingXValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTRangePlotBindingYValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTScatterPlotBindingPlotSymbols' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTScatterPlotBindingXValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTScatterPlotBindingYValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTTradingRangePlotBindingCloseValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTTradingRangePlotBindingHighValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTTradingRangePlotBindingLowValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTTradingRangePlotBindingOpenValues' const='true'/>
<constant declared_type='NSString*' type='@' name='CPTTradingRangePlotBindingXValues' const='true'/>
<constant declared_type='NSString*' type='@' name='kCPTDarkGradientTheme' const='true'/>
<constant declared_type='NSString*' type='@' name='kCPTPlainBlackTheme' const='true'/>
<constant declared_type='NSString*' type='@' name='kCPTPlainWhiteTheme' const='true'/>
<constant declared_type='NSString*' type='@' name='kCPTSlateTheme' const='true'/>
<constant declared_type='NSString*' type='@' name='kCPTStocksTheme' const='true'/>
<constant declared_type='CGFloat' type='f' name='kCPTTextLayerMarginWidth' const='true'/>
<enum value='5' name='CPTAlignmentBottom'/>
<enum value='1' name='CPTAlignmentCenter'/>
<enum value='0' name='CPTAlignmentLeft'/>
<enum value='4' name='CPTAlignmentMiddle'/>
<enum value='2' name='CPTAlignmentRight'/>
<enum value='3' name='CPTAlignmentTop'/>
<enum value='3' name='CPTAxisLabelingPolicyAutomatic'/>
<enum value='4' name='CPTAxisLabelingPolicyEqualDivisions'/>
<enum value='2' name='CPTAxisLabelingPolicyFixedInterval'/>
<enum value='1' name='CPTAxisLabelingPolicyLocationsProvided'/>
<enum value='0' name='CPTAxisLabelingPolicyNone'/>
<enum value='2' name='CPTBarPlotFieldBarBase'/>
<enum value='0' name='CPTBarPlotFieldBarLocation'/>
<enum value='1' name='CPTBarPlotFieldBarTip'/>
<enum value='1' name='CPTChromaticBlendingMode'/>
<enum value='4' name='CPTComplexFloatingPointDataType'/>
<enum value='0' name='CPTCoordinateX'/>
<enum value='1' name='CPTCoordinateY'/>
<enum value='2' name='CPTCoordinateZ'/>
<enum value='5' name='CPTDecimalDataType'/>
<enum value='1' name='CPTErrorBarTypeConstantRatio'/>
<enum value='2' name='CPTErrorBarTypeConstantValue'/>
<enum value='0' name='CPTErrorBarTypeCustom'/>
<enum value='3' name='CPTFloatingPointDataType'/>
<enum value='0' name='CPTGradientTypeAxial'/>
<enum value='1' name='CPTGradientTypeRadial'/>
<enum value='4' name='CPTGraphLayerTypeAxisLabels'/>
<enum value='2' name='CPTGraphLayerTypeAxisLines'/>
<enum value='5' name='CPTGraphLayerTypeAxisTitles'/>
<enum value='1' name='CPTGraphLayerTypeMajorGridLines'/>
<enum value='0' name='CPTGraphLayerTypeMinorGridLines'/>
<enum value='3' name='CPTGraphLayerTypePlots'/>
<enum value='1' name='CPTIntegerDataType'/>
<enum value='2' name='CPTInverseChromaticBlendingMode'/>
<enum value='9' name='CPTLineCapTypeBar'/>
<enum value='10' name='CPTLineCapTypeCross'/>
<enum value='12' name='CPTLineCapTypeCustom'/>
<enum value='6' name='CPTLineCapTypeDiamond'/>
<enum value='5' name='CPTLineCapTypeEllipse'/>
<enum value='8' name='CPTLineCapTypeHexagon'/>
<enum value='0' name='CPTLineCapTypeNone'/>
<enum value='1' name='CPTLineCapTypeOpenArrow'/>
<enum value='7' name='CPTLineCapTypePentagon'/>
<enum value='4' name='CPTLineCapTypeRectangle'/>
<enum value='11' name='CPTLineCapTypeSnow'/>
<enum value='2' name='CPTLineCapTypeSolidArrow'/>
<enum value='3' name='CPTLineCapTypeSweptArrow'/>
<enum value='0' name='CPTLinearBlendingMode'/>
<enum value='2' name='CPTNumericTypeDouble'/>
<enum value='1' name='CPTNumericTypeFloat'/>
<enum value='0' name='CPTNumericTypeInteger'/>
<enum value='0' name='CPTPieChartFieldSliceWidth'/>
<enum value='1' name='CPTPieChartFieldSliceWidthNormalized'/>
<enum value='2' name='CPTPieChartFieldSliceWidthSum'/>
<enum value='0' name='CPTPieDirectionClockwise'/>
<enum value='1' name='CPTPieDirectionCounterClockwise'/>
<enum value='0' name='CPTPlotCachePrecisionAuto'/>
<enum value='2' name='CPTPlotCachePrecisionDecimal'/>
<enum value='1' name='CPTPlotCachePrecisionDouble'/>
<enum value='2' name='CPTPlotRangeComparisonResultNumberAboveRange'/>
<enum value='0' name='CPTPlotRangeComparisonResultNumberBelowRange'/>
<enum value='1' name='CPTPlotRangeComparisonResultNumberInRange'/>
<enum value='8' name='CPTPlotSymbolTypeCross'/>
<enum value='12' name='CPTPlotSymbolTypeCustom'/>
<enum value='10' name='CPTPlotSymbolTypeDash'/>
<enum value='3' name='CPTPlotSymbolTypeDiamond'/>
<enum value='2' name='CPTPlotSymbolTypeEllipse'/>
<enum value='7' name='CPTPlotSymbolTypeHexagon'/>
<enum value='0' name='CPTPlotSymbolTypeNone'/>
<enum value='6' name='CPTPlotSymbolTypePentagon'/>
<enum value='9' name='CPTPlotSymbolTypePlus'/>
<enum value='1' name='CPTPlotSymbolTypeRectangle'/>
<enum value='11' name='CPTPlotSymbolTypeSnow'/>
<enum value='5' name='CPTPlotSymbolTypeStar'/>
<enum value='4' name='CPTPlotSymbolTypeTriangle'/>
<enum value='2' name='CPTRangePlotFieldHigh'/>
<enum value='4' name='CPTRangePlotFieldLeft'/>
<enum value='3' name='CPTRangePlotFieldLow'/>
<enum value='5' name='CPTRangePlotFieldRight'/>
<enum value='0' name='CPTRangePlotFieldX'/>
<enum value='1' name='CPTRangePlotFieldY'/>
<enum value='1' name='CPTRectAnchorBottom'/>
<enum value='0' name='CPTRectAnchorBottomLeft'/>
<enum value='2' name='CPTRectAnchorBottomRight'/>
<enum value='8' name='CPTRectAnchorCenter'/>
<enum value='3' name='CPTRectAnchorLeft'/>
<enum value='4' name='CPTRectAnchorRight'/>
<enum value='6' name='CPTRectAnchorTop'/>
<enum value='5' name='CPTRectAnchorTopLeft'/>
<enum value='7' name='CPTRectAnchorTopRight'/>
<enum value='2' name='CPTScaleTypeAngular'/>
<enum value='4' name='CPTScaleTypeCategory'/>
<enum value='3' name='CPTScaleTypeDateTime'/>
<enum value='0' name='CPTScaleTypeLinear'/>
<enum value='1' name='CPTScaleTypeLog'/>
<enum value='0' name='CPTScatterPlotFieldX'/>
<enum value='1' name='CPTScatterPlotFieldY'/>
<enum value='2' name='CPTScatterPlotInterpolationHistogram'/>
<enum value='0' name='CPTScatterPlotInterpolationLinear'/>
<enum value='1' name='CPTScatterPlotInterpolationStepped'/>
<enum value='-1' name='CPTSignNegative'/>
<enum value='0' name='CPTSignNone'/>
<enum value='1' name='CPTSignPositive'/>
<enum value='1' name='CPTTextAlignmentCenter'/>
<enum value='0' name='CPTTextAlignmentLeft'/>
<enum value='2' name='CPTTextAlignmentRight'/>
<enum value='4' name='CPTTradingRangePlotFieldClose'/>
<enum value='2' name='CPTTradingRangePlotFieldHigh'/>
<enum value='3' name='CPTTradingRangePlotFieldLow'/>
<enum value='1' name='CPTTradingRangePlotFieldOpen'/>
<enum value='0' name='CPTTradingRangePlotFieldX'/>
<enum value='1' name='CPTTradingRangePlotStyleCandleStick'/>
<enum value='0' name='CPTTradingRangePlotStyleOHLC'/>
<enum value='0' name='CPTUndefinedDataType'/>
<enum value='2' name='CPTUnsignedIntegerDataType'/>
<enum value='0' name='CPT_SDK_SUPPORTS_WEAK'/>
<function name='AddRoundedRectPath'>
<arg declared_type='CGContextRef' type='^{CGContext=}' name='context'/>
<arg declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect'/>
<arg declared_type='CGFloat' type='f' name='cornerRadius'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CPTAlignIntegralPointToUserSpace'>
<arg declared_type='CGContextRef' type='^{CGContext=}' name='context'/>
<arg declared_type='CGPoint' type='{CGPoint=ff}' name='p'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='CPTAlignPointToUserSpace'>
<arg declared_type='CGContextRef' type='^{CGContext=}' name='context'/>
<arg declared_type='CGPoint' type='{CGPoint=ff}' name='p'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</function>
<function name='CPTAlignRectToUserSpace'>
<arg declared_type='CGContextRef' type='^{CGContext=}' name='context'/>
<arg declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='r'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CPTAlignSizeToUserSpace'>
<arg declared_type='CGContextRef' type='^{CGContext=}' name='context'/>
<arg declared_type='CGSize' type='{CGSize=ff}' name='s'/>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</function>
<function name='CPTDataType'>
<arg declared_type='CPTDataTypeFormat' type='i' name='format'/>
<arg declared_type='size_t' type='L' name='sampleBytes'/>
<arg declared_type='CFByteOrder' type='l' name='byteOrder'/>
<retval declared_type='CPTNumericDataType' type='{_CPTNumericDataType=iIi}'/>
</function>
<function name='CPTDataTypeEqualToDataType'>
<arg declared_type='CPTNumericDataType' type='{_CPTNumericDataType=iIi}' name='dataType1'/>
<arg declared_type='CPTNumericDataType' type='{_CPTNumericDataType=iIi}' name='dataType2'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='CPTDataTypeIsSupported'>
<arg declared_type='CPTNumericDataType' type='{_CPTNumericDataType=iIi}' name='format'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='CPTDataTypeStringFromDataType'>
<arg declared_type='CPTNumericDataType' type='{_CPTNumericDataType=iIi}' name='dataType'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='CPTDataTypeWithDataTypeString'>
<arg declared_type='NSString*' type='@' name='dataTypeString'/>
<retval declared_type='CPTNumericDataType' type='{_CPTNumericDataType=iIi}'/>
</function>
<function name='CPTDecimalAdd'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='leftOperand'/>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='rightOperand'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalCGFloatValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='CGFloat' type='f'/>
</function>
<function name='CPTDecimalCharValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='int8_t' type='c'/>
</function>
<function name='CPTDecimalDivide'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='numerator'/>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='denominator'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalDoubleValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CPTDecimalEquals'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='leftOperand'/>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='rightOperand'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='CPTDecimalFloatValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='float' type='f'/>
</function>
<function name='CPTDecimalFromCGFloat'>
<arg declared_type='CGFloat' type='f' name='f'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromChar'>
<arg declared_type='int8_t' type='c' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromDouble'>
<arg declared_type='double' type='d' name='d'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromFloat'>
<arg declared_type='float' type='f' name='f'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromInt'>
<arg declared_type='int' type='i' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromInteger'>
<arg declared_type='NSInteger' type='i' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromLong'>
<arg declared_type='int32_t' type='i' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromLongLong'>
<arg declared_type='int64_t' type='q' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromShort'>
<arg declared_type='int16_t' type='s' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromString'>
<arg declared_type='NSString*' type='@' name='stringRepresentation'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromUnsignedChar'>
<arg declared_type='uint8_t' type='C' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromUnsignedInt'>
<arg declared_type='unsigned int' type='I' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromUnsignedInteger'>
<arg declared_type='NSUInteger' type='I' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromUnsignedLong'>
<arg declared_type='uint32_t' type='I' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromUnsignedLongLong'>
<arg declared_type='uint64_t' type='Q' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalFromUnsignedShort'>
<arg declared_type='uint16_t' type='S' name='i'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalGreaterThan'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='leftOperand'/>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='rightOperand'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='CPTDecimalGreaterThanOrEqualTo'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='leftOperand'/>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='rightOperand'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='CPTDecimalIntValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='int' type='i'/>
</function>
<function name='CPTDecimalIntegerValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='NSInteger' type='i'/>
</function>
<function name='CPTDecimalLessThan'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='leftOperand'/>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='rightOperand'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='CPTDecimalLessThanOrEqualTo'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='leftOperand'/>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='rightOperand'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='CPTDecimalLongLongValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='int64_t' type='q'/>
</function>
<function name='CPTDecimalLongValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='int32_t' type='i'/>
</function>
<function name='CPTDecimalMultiply'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='leftOperand'/>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='rightOperand'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalNaN'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalShortValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='int16_t' type='s'/>
</function>
<function name='CPTDecimalStringValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='CPTDecimalSubtract'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='leftOperand'/>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='rightOperand'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</function>
<function name='CPTDecimalUnsignedCharValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='uint8_t' type='C'/>
</function>
<function name='CPTDecimalUnsignedIntValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='unsigned int' type='I'/>
</function>
<function name='CPTDecimalUnsignedIntegerValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='NSUInteger' type='I'/>
</function>
<function name='CPTDecimalUnsignedLongLongValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='uint64_t' type='Q'/>
</function>
<function name='CPTDecimalUnsignedLongValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CPTDecimalUnsignedShortValue'>
<arg declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='decimalNumber'/>
<retval declared_type='uint16_t' type='S'/>
</function>
<function name='CPTExpandedRange'>
<arg declared_type='NSRange' type='{_NSRange=II}' name='range'/>
<arg declared_type='NSInteger' type='i' name='expandBy'/>
<retval declared_type='NSRange' type='{_NSRange=II}'/>
</function>
<function name='CPTGetCurrentContext'>
<retval declared_type='CGContextRef' type='^{CGContext=}'/>
</function>
<function name='CPTOrthogonalCoordinate'>
<arg declared_type='CPTCoordinate' type='i' name='coord'/>
<retval declared_type='CPTCoordinate' type='i'/>
</function>
<function name='CPTPopCGContext'>
<retval declared_type='void' type='v'/>
</function>
<function name='CPTPushCGContext'>
<arg declared_type='CGContextRef' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CPTRGBAColorFromCGColor'>
<arg declared_type='CGColorRef' type='^{CGColor=}' name='color'/>
<retval declared_type='CPTRGBAColor' type='{_CPTRGBAColor=ffff}'/>
</function>
<function name='CPTStringFromPoint'>
<arg declared_type='CGPoint' type='{CGPoint=ff}' name='p'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='CPTStringFromRect'>
<arg declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='r'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='CPTStringFromSize'>
<arg declared_type='CGSize' type='{CGSize=ff}' name='s'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='CreateRoundedRectPath'>
<arg declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect'/>
<arg declared_type='CGFloat' type='f' name='cornerRadius'/>
<retval already_retained='true' declared_type='CGPathRef' type='^{CGPath=}'/>
</function>
<class name='CPTAnnotation'>
<method selector='annotationHostLayer'>
<retval declared_type='CPTAnnotationHostLayer*' type='@'/>
</method>
<method selector='contentAnchorPoint'>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='contentLayer'>
<retval declared_type='CPTLayer*' type='@'/>
</method>
<method selector='displacement'>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='positionContentLayer'>
<retval declared_type='void' type='v'/>
</method>
<method selector='rotation'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setAnnotationHostLayer:'>
<arg declared_type='CPTAnnotationHostLayer*' index='0' type='@' name='annotationHostLayer'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentAnchorPoint:'>
<arg declared_type='CGPoint' index='0' type='{CGPoint=ff}' name='contentAnchorPoint'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentLayer:'>
<arg declared_type='CPTLayer*' index='0' type='@' name='contentLayer'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplacement:'>
<arg declared_type='CGPoint' index='0' type='{CGPoint=ff}' name='displacement'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRotation:'>
<arg declared_type='CGFloat' index='0' type='f' name='rotation'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTAnnotationHostLayer'>
<method selector='addAnnotation:'>
<arg declared_type='CPTAnnotation*' index='0' type='@' name='annotation'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='annotations'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='removeAllAnnotations'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAnnotation:'>
<arg declared_type='CPTAnnotation*' index='0' type='@' name='annotation'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTAxis'>
<method selector='addBackgroundLimitBand:'>
<arg declared_type='CPTLimitBand*' index='0' type='@' name='limitBand'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='alternatingBandFills'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='axisLabels'>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='axisLineCapMax'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method selector='axisLineCapMin'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method selector='axisLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='axisSet'>
<retval declared_type='CPTAxisSet*' type='@'/>
</method>
<method selector='axisTitle'>
<retval declared_type='CPTAxisTitle*' type='@'/>
</method>
<method selector='backgroundLimitBands'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='coordinate'>
<retval declared_type='CPTCoordinate' type='i'/>
</method>
<method selector='defaultTitleLocation'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='drawBackgroundBandsInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawBackgroundLimitsInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawGridLinesInContext:isMajor:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='context'/>
<arg declared_type='BOOL' index='1' type='B' name='major'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='filteredMajorTickLocations:'>
<arg declared_type='NSSet*' index='0' type='@' name='allLocations'/>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='filteredMinorTickLocations:'>
<arg declared_type='NSSet*' index='0' type='@' name='allLocations'/>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='gridLinesRange'>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method selector='labelAlignment'>
<retval declared_type='CPTAlignment' type='i'/>
</method>
<method selector='labelExclusionRanges'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='labelFormatter'>
<retval declared_type='NSNumberFormatter*' type='@'/>
</method>
<method selector='labelOffset'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='labelRotation'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='labelShadow'>
<retval declared_type='CPTShadow*' type='@'/>
</method>
<method selector='labelTextStyle'>
<retval declared_type='CPTTextStyle*' type='@'/>
</method>
<method selector='labelingOrigin'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='labelingPolicy'>
<retval declared_type='CPTAxisLabelingPolicy' type='i'/>
</method>
<method selector='majorGridLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='majorGridLines'>
<retval declared_type='CPTGridLines*' type='@'/>
</method>
<method selector='majorIntervalLength'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='majorTickLength'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='majorTickLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='majorTickLocations'>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='minorGridLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='minorGridLines'>
<retval declared_type='CPTGridLines*' type='@'/>
</method>
<method selector='minorTickAxisLabels'>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='minorTickLabelAlignment'>
<retval declared_type='CPTAlignment' type='i'/>
</method>
<method selector='minorTickLabelFormatter'>
<retval declared_type='NSNumberFormatter*' type='@'/>
</method>
<method selector='minorTickLabelOffset'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='minorTickLabelRotation'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='minorTickLabelTextStyle'>
<retval declared_type='CPTTextStyle*' type='@'/>
</method>
<method selector='minorTickLength'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='minorTickLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='minorTickLocations'>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='minorTicksPerInterval'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='needsRelabel'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='plotArea'>
<retval declared_type='CPTPlotArea*' type='@'/>
</method>
<method selector='plotSpace'>
<retval declared_type='CPTPlotSpace*' type='@'/>
</method>
<method selector='preferredNumberOfMajorTicks'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='relabel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeBackgroundLimitBand:'>
<arg declared_type='CPTLimitBand*' index='0' type='@' name='limitBand'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='separateLayers'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAlternatingBandFills:'>
<arg declared_type='NSArray*' index='0' type='@' name='alternatingBandFills'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAxisLabels:'>
<arg declared_type='NSSet*' index='0' type='@' name='axisLabels'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAxisLineCapMax:'>
<arg declared_type='CPTLineCap*' index='0' type='@' name='axisLineCapMax'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAxisLineCapMin:'>
<arg declared_type='CPTLineCap*' index='0' type='@' name='axisLineCapMin'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAxisLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='axisLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAxisTitle:'>
<arg declared_type='CPTAxisTitle*' index='0' type='@' name='axisTitle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCoordinate:'>
<arg declared_type='CPTCoordinate' index='0' type='i' name='coordinate'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGridLinesRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='gridLinesRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelAlignment:'>
<arg declared_type='CPTAlignment' index='0' type='i' name='labelAlignment'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelExclusionRanges:'>
<arg declared_type='NSArray*' index='0' type='@' name='labelExclusionRanges'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelFormatter:'>
<arg declared_type='NSNumberFormatter*' index='0' type='@' name='labelFormatter'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='labelOffset'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelRotation:'>
<arg declared_type='CGFloat' index='0' type='f' name='labelRotation'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelShadow:'>
<arg declared_type='CPTShadow*' index='0' type='@' name='labelShadow'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelTextStyle:'>
<arg declared_type='CPTTextStyle*' index='0' type='@' name='labelTextStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelingOrigin:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='labelingOrigin'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelingPolicy:'>
<arg declared_type='CPTAxisLabelingPolicy' index='0' type='i' name='labelingPolicy'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMajorGridLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='majorGridLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMajorIntervalLength:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='majorIntervalLength'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMajorTickLength:'>
<arg declared_type='CGFloat' index='0' type='f' name='majorTickLength'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMajorTickLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='majorTickLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMajorTickLocations:'>
<arg declared_type='NSSet*' index='0' type='@' name='majorTickLocations'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorGridLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='minorGridLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorTickAxisLabels:'>
<arg declared_type='NSSet*' index='0' type='@' name='minorTickAxisLabels'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorTickLabelAlignment:'>
<arg declared_type='CPTAlignment' index='0' type='i' name='minorTickLabelAlignment'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorTickLabelFormatter:'>
<arg declared_type='NSNumberFormatter*' index='0' type='@' name='minorTickLabelFormatter'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorTickLabelOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='minorTickLabelOffset'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorTickLabelRotation:'>
<arg declared_type='CGFloat' index='0' type='f' name='minorTickLabelRotation'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorTickLabelTextStyle:'>
<arg declared_type='CPTTextStyle*' index='0' type='@' name='minorTickLabelTextStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorTickLength:'>
<arg declared_type='CGFloat' index='0' type='f' name='minorTickLength'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorTickLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='minorTickLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorTickLocations:'>
<arg declared_type='NSSet*' index='0' type='@' name='minorTickLocations'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorTicksPerInterval:'>
<arg declared_type='NSUInteger' index='0' type='I' name='minorTicksPerInterval'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsRelabel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotArea:'>
<arg declared_type='CPTPlotArea*' index='0' type='@' name='plotArea'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotSpace:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='plotSpace'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPreferredNumberOfMajorTicks:'>
<arg declared_type='NSUInteger' index='0' type='I' name='preferredNumberOfMajorTicks'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSeparateLayers:'>
<arg declared_type='BOOL' index='0' type='B' name='separateLayers'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTickDirection:'>
<arg declared_type='CPTSign' index='0' type='i' name='tickDirection'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg declared_type='NSString*' index='0' type='@' name='title'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleLocation:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='titleLocation'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='titleOffset'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleRotation:'>
<arg declared_type='CGFloat' index='0' type='f' name='titleRotation'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleTextStyle:'>
<arg declared_type='CPTTextStyle*' index='0' type='@' name='titleTextStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVisibleRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='visibleRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tickDirection'>
<retval declared_type='CPTSign' type='i'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='titleLocation'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='titleOffset'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='titleRotation'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='titleTextStyle'>
<retval declared_type='CPTTextStyle*' type='@'/>
</method>
<method selector='updateMajorTickLabels'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateMinorTickLabels'>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewPointForCoordinateDecimalNumber:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='coordinateDecimalNumber'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='visibleRange'>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
</class>
<class name='CPTAxisLabel'>
<method selector='alignment'>
<retval declared_type='CPTAlignment' type='i'/>
</method>
<method selector='contentLayer'>
<retval declared_type='CPTLayer*' type='@'/>
</method>
<method selector='initWithContentLayer:'>
<arg declared_type='CPTLayer*' index='0' type='@' name='layer'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithText:textStyle:'>
<arg declared_type='NSString*' index='0' type='@' name='newText'/>
<arg declared_type='CPTTextStyle*' index='1' type='@' name='style'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='offset'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='positionBetweenViewPoint:andViewPoint:forCoordinate:inDirection:'>
<arg declared_type='CGPoint' index='0' type='{CGPoint=ff}' name='firstPoint'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='secondPoint'/>
<arg declared_type='CPTCoordinate' index='2' type='i' name='coordinate'/>
<arg declared_type='CPTSign' index='3' type='i' name='direction'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='positionRelativeToViewPoint:forCoordinate:inDirection:'>
<arg declared_type='CGPoint' index='0' type='{CGPoint=ff}' name='point'/>
<arg declared_type='CPTCoordinate' index='1' type='i' name='coordinate'/>
<arg declared_type='CPTSign' index='2' type='i' name='direction'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rotation'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setAlignment:'>
<arg declared_type='CPTAlignment' index='0' type='i' name='alignment'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentLayer:'>
<arg declared_type='CPTLayer*' index='0' type='@' name='contentLayer'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='offset'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRotation:'>
<arg declared_type='CGFloat' index='0' type='f' name='rotation'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTickLocation:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='tickLocation'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tickLocation'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
</class>
<class name='CPTAxisSet'>
<method selector='axes'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='borderLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='relabelAxes'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAxes:'>
<arg declared_type='NSArray*' index='0' type='@' name='axes'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBorderLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='borderLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTBarPlot'>
<method selector='barBasesVary'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='barCornerRadius'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='barOffset'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='barOffsetScale'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='barWidth'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='barWidthScale'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='barWidthsAreInViewCoordinates'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='barsAreHorizontal'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='baseValue'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='fill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='lineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='plotRange'>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method selector='setBarBasesVary:'>
<arg declared_type='BOOL' index='0' type='B' name='barBasesVary'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBarCornerRadius:'>
<arg declared_type='CGFloat' index='0' type='f' name='barCornerRadius'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBarOffset:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='barOffset'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBarOffsetScale:'>
<arg declared_type='CGFloat' index='0' type='f' name='barOffsetScale'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBarWidth:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='barWidth'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBarWidthScale:'>
<arg declared_type='CGFloat' index='0' type='f' name='barWidthScale'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBarWidthsAreInViewCoordinates:'>
<arg declared_type='BOOL' index='0' type='B' name='barWidthsAreInViewCoordinates'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBarsAreHorizontal:'>
<arg declared_type='BOOL' index='0' type='B' name='barsAreHorizontal'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBaseValue:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='baseValue'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='fill'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='lineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='plotRange'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='tubularBarPlotWithColor:horizontalBars:'>
<arg declared_type='CPTColor*' index='0' type='@' name='color'/>
<arg declared_type='BOOL' index='1' type='B' name='horizontal'/>
<retval declared_type='CPTBarPlot*' type='@'/>
</method>
</class>
<class name='CPTBorderedLayer'>
<method selector='borderLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='fill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='setBorderLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='borderLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='fill'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTColor'>
<method class_method='true' selector='blackColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='blueColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='brownColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method selector='cgColor'>
<retval declared_type='CGColorRef' type='^{CGColor=}'/>
</method>
<method class_method='true' selector='clearColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method selector='colorWithAlphaComponent:'>
<arg declared_type='CGFloat' index='0' type='f' name='alpha'/>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='colorWithCGColor:'>
<arg declared_type='CGColorRef' index='0' type='^{CGColor=}' name='newCGColor'/>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='colorWithComponentRed:green:blue:alpha:'>
<arg declared_type='CGFloat' index='0' type='f' name='red'/>
<arg declared_type='CGFloat' index='1' type='f' name='green'/>
<arg declared_type='CGFloat' index='2' type='f' name='blue'/>
<arg declared_type='CGFloat' index='3' type='f' name='alpha'/>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='colorWithGenericGray:'>
<arg declared_type='CGFloat' index='0' type='f' name='gray'/>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='cyanColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='darkGrayColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='grayColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='greenColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method selector='initWithCGColor:'>
<arg declared_type='CGColorRef' index='0' type='^{CGColor=}' name='cgColor'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithComponentRed:green:blue:alpha:'>
<arg declared_type='CGFloat' index='0' type='f' name='red'/>
<arg declared_type='CGFloat' index='1' type='f' name='green'/>
<arg declared_type='CGFloat' index='2' type='f' name='blue'/>
<arg declared_type='CGFloat' index='3' type='f' name='alpha'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='lightGrayColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='magentaColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='orangeColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='purpleColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='redColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method selector='uiColor'>
<retval declared_type='UIColor*' type='@'/>
</method>
<method class_method='true' selector='whiteColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method class_method='true' selector='yellowColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
</class>
<class name='CPTColorSpace'>
<method selector='cgColorSpace'>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method class_method='true' selector='genericRGBSpace'>
<retval declared_type='CPTColorSpace*' type='@'/>
</method>
<method selector='initWithCGColorSpace:'>
<arg declared_type='CGColorSpaceRef' index='0' type='^{CGColorSpace=}' name='colorSpace'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CPTConstraints'>
<method class_method='true' selector='constraintWithLowerOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='newOffset'/>
<retval declared_type='CPTConstraints*' type='@'/>
</method>
<method class_method='true' selector='constraintWithRelativeOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='newOffset'/>
<retval declared_type='CPTConstraints*' type='@'/>
</method>
<method class_method='true' selector='constraintWithUpperOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='newOffset'/>
<retval declared_type='CPTConstraints*' type='@'/>
</method>
<method selector='initWithLowerOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='newOffset'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithRelativeOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='newOffset'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithUpperOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='newOffset'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isEqualToConstraint:'>
<arg declared_type='CPTConstraints*' index='0' type='@' name='otherConstraint'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='positionForLowerBound:upperBound:'>
<arg declared_type='CGFloat' index='0' type='f' name='lowerBound'/>
<arg declared_type='CGFloat' index='1' type='f' name='upperBound'/>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='CPTFill'>
<method selector='fillPathInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='theContext'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fillRect:inContext:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='theRect'/>
<arg declared_type='CGContextRef' index='1' type='^{CGContext=}' name='theContext'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='fillWithColor:'>
<arg declared_type='CPTColor*' index='0' type='@' name='aColor'/>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method class_method='true' selector='fillWithGradient:'>
<arg declared_type='CPTGradient*' index='0' type='@' name='aGradient'/>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method class_method='true' selector='fillWithImage:'>
<arg declared_type='CPTImage*' index='0' type='@' name='anImage'/>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='initWithColor:'>
<arg declared_type='CPTColor*' index='0' type='@' name='aColor'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithGradient:'>
<arg declared_type='CPTGradient*' index='0' type='@' name='aGradient'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithImage:'>
<arg declared_type='CPTImage*' index='0' type='@' name='anImage'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CPTGradient'>
<method selector='addColorStop:atPosition:'>
<arg declared_type='CPTColor*' index='0' type='@' name='color'/>
<arg declared_type='CGFloat' index='1' type='f' name='position'/>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method selector='angle'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method class_method='true' selector='aquaNormalGradient'>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method class_method='true' selector='aquaPressedGradient'>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method class_method='true' selector='aquaSelectedGradient'>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method selector='blendingMode'>
<retval declared_type='CPTGradientBlendingMode' type='i'/>
</method>
<method selector='drawSwatchInRect:inContext:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect'/>
<arg declared_type='CGContextRef' index='1' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fillPathInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fillRect:inContext:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect'/>
<arg declared_type='CGContextRef' index='1' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='gradientType'>
<retval declared_type='CPTGradientType' type='i'/>
</method>
<method selector='gradientWithAlphaComponent:'>
<arg declared_type='CGFloat' index='0' type='f' name='alpha'/>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method class_method='true' selector='gradientWithBeginningColor:endingColor:'>
<arg declared_type='CPTColor*' index='0' type='@' name='begin'/>
<arg declared_type='CPTColor*' index='1' type='@' name='end'/>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method class_method='true' selector='gradientWithBeginningColor:endingColor:beginningPosition:endingPosition:'>
<arg declared_type='CPTColor*' index='0' type='@' name='begin'/>
<arg declared_type='CPTColor*' index='1' type='@' name='end'/>
<arg declared_type='CGFloat' index='2' type='f' name='beginningPosition'/>
<arg declared_type='CGFloat' index='3' type='f' name='endingPosition'/>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method selector='gradientWithBlendingMode:'>
<arg declared_type='CPTGradientBlendingMode' index='0' type='i' name='mode'/>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method class_method='true' selector='hydrogenSpectrumGradient'>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method selector='newColorAtPosition:'>
<arg declared_type='CGFloat' index='0' type='f' name='position'/>
<retval declared_type='CGColorRef' type='^{CGColor=}'/>
</method>
<method selector='newColorStopAtIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='index'/>
<retval declared_type='CGColorRef' type='^{CGColor=}'/>
</method>
<method class_method='true' selector='rainbowGradient'>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method selector='removeColorStopAtIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='index'/>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method selector='removeColorStopAtPosition:'>
<arg declared_type='CGFloat' index='0' type='f' name='position'/>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method selector='setAngle:'>
<arg declared_type='CGFloat' index='0' type='f' name='angle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGradientType:'>
<arg declared_type='CPTGradientType' index='0' type='i' name='gradientType'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='sourceListSelectedGradient'>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method class_method='true' selector='sourceListUnselectedGradient'>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method class_method='true' selector='unifiedDarkGradient'>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method class_method='true' selector='unifiedNormalGradient'>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method class_method='true' selector='unifiedPressedGradient'>
<retval declared_type='CPTGradient*' type='@'/>
</method>
<method class_method='true' selector='unifiedSelectedGradient'>
<retval declared_type='CPTGradient*' type='@'/>
</method>
</class>
<class name='CPTGraph'>
<method selector='addPlot:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addPlot:toPlotSpace:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='CPTPlotSpace*' index='1' type='@' name='space'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addPlotSpace:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='allPlotSpaces'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='allPlots'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='applyTheme:'>
<arg declared_type='CPTTheme*' index='0' type='@' name='theme'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='axisSet'>
<retval declared_type='CPTAxisSet*' type='@'/>
</method>
<method selector='defaultPlotSpace'>
<retval declared_type='CPTPlotSpace*' type='@'/>
</method>
<method selector='insertPlot:atIndex:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertPlot:atIndex:intoPlotSpace:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<arg declared_type='CPTPlotSpace*' index='2' type='@' name='space'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='legend'>
<retval declared_type='CPTLegend*' type='@'/>
</method>
<method selector='legendAnchor'>
<retval declared_type='CPTRectAnchor' type='i'/>
</method>
<method selector='legendDisplacement'>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='newAxisSet'>
<retval declared_type='CPTAxisSet*' type='@'/>
</method>
<method selector='newPlotSpace'>
<retval declared_type='CPTPlotSpace*' type='@'/>
</method>
<method selector='plotAreaFrame'>
<retval declared_type='CPTPlotAreaFrame*' type='@'/>
</method>
<method selector='plotAtIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='index'/>
<retval declared_type='CPTPlot*' type='@'/>
</method>
<method selector='plotSpaceAtIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='index'/>
<retval declared_type='CPTPlotSpace*' type='@'/>
</method>
<method selector='plotSpaceWithIdentifier:'>
<arg declared_type='id' index='0' type='@' name='identifier'/>
<retval declared_type='CPTPlotSpace*' type='@'/>
</method>
<method selector='plotWithIdentifier:'>
<arg declared_type='id' index='0' type='@' name='identifier'/>
<retval declared_type='CPTPlot*' type='@'/>
</method>
<method selector='reloadData'>
<retval declared_type='void' type='v'/>
</method>
<method selector='reloadDataIfNeeded'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removePlot:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removePlotSpace:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='plotSpace'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removePlotWithIdentifier:'>
<arg declared_type='id' index='0' type='@' name='identifier'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAxisSet:'>
<arg declared_type='CPTAxisSet*' index='0' type='@' name='axisSet'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLegend:'>
<arg declared_type='CPTLegend*' index='0' type='@' name='legend'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLegendAnchor:'>
<arg declared_type='CPTRectAnchor' index='0' type='i' name='legendAnchor'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLegendDisplacement:'>
<arg declared_type='CGPoint' index='0' type='{CGPoint=ff}' name='legendDisplacement'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotAreaFrame:'>
<arg declared_type='CPTPlotAreaFrame*' index='0' type='@' name='plotAreaFrame'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg declared_type='NSString*' index='0' type='@' name='title'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleDisplacement:'>
<arg declared_type='CGPoint' index='0' type='{CGPoint=ff}' name='titleDisplacement'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitlePlotAreaFrameAnchor:'>
<arg declared_type='CPTRectAnchor' index='0' type='i' name='titlePlotAreaFrameAnchor'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleTextStyle:'>
<arg declared_type='CPTTextStyle*' index='0' type='@' name='titleTextStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTopDownLayerOrder:'>
<arg declared_type='NSArray*' index='0' type='@' name='topDownLayerOrder'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='titleDisplacement'>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='titlePlotAreaFrameAnchor'>
<retval declared_type='CPTRectAnchor' type='i'/>
</method>
<method selector='titleTextStyle'>
<retval declared_type='CPTTextStyle*' type='@'/>
</method>
<method selector='topDownLayerOrder'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='CPTGraphHostingView'>
<method selector='allowPinchScaling'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='collapsesLayers'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hostedGraph'>
<retval declared_type='CPTGraph*' type='@'/>
</method>
<method selector='setAllowPinchScaling:'>
<arg declared_type='BOOL' index='0' type='B' name='allowPinchScaling'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCollapsesLayers:'>
<arg declared_type='BOOL' index='0' type='B' name='collapsesLayers'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHostedGraph:'>
<arg declared_type='CPTGraph*' index='0' type='@' name='hostedGraph'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTGridLineGroup'>
<method selector='major'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='plotArea'>
<retval declared_type='CPTPlotArea*' type='@'/>
</method>
<method selector='setMajor:'>
<arg declared_type='BOOL' index='0' type='B' name='major'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotArea:'>
<arg declared_type='CPTPlotArea*' index='0' type='@' name='plotArea'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTGridLines'>
<method selector='axis'>
<retval declared_type='CPTAxis*' type='@'/>
</method>
<method selector='major'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAxis:'>
<arg declared_type='CPTAxis*' index='0' type='@' name='axis'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMajor:'>
<arg declared_type='BOOL' index='0' type='B' name='major'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTImage'>
<method selector='drawInRect:inContext:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect'/>
<arg declared_type='CGContextRef' index='1' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='image'>
<retval declared_type='CGImageRef' type='^{CGImage=}'/>
</method>
<method class_method='true' selector='imageForPNGFile:'>
<arg declared_type='NSString*' index='0' type='@' name='path'/>
<retval declared_type='CPTImage*' type='@'/>
</method>
<method class_method='true' selector='imageWithCGImage:'>
<arg declared_type='CGImageRef' index='0' type='^{CGImage=}' name='anImage'/>
<retval declared_type='CPTImage*' type='@'/>
</method>
<method class_method='true' selector='imageWithCGImage:scale:'>
<arg declared_type='CGImageRef' index='0' type='^{CGImage=}' name='anImage'/>
<arg declared_type='CGFloat' index='1' type='f' name='newScale'/>
<retval declared_type='CPTImage*' type='@'/>
</method>
<method selector='initForPNGFile:'>
<arg declared_type='NSString*' index='0' type='@' name='path'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCGImage:'>
<arg declared_type='CGImageRef' index='0' type='^{CGImage=}' name='anImage'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCGImage:scale:'>
<arg declared_type='CGImageRef' index='0' type='^{CGImage=}' name='anImage'/>
<arg declared_type='CGFloat' index='1' type='f' name='newScale'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isTiled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='scale'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setImage:'>
<arg declared_type='CGImageRef' index='0' type='^{CGImage=}' name='image'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScale:'>
<arg declared_type='CGFloat' index='0' type='f' name='scale'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTileAnchoredToContext:'>
<arg declared_type='BOOL' index='0' type='B' name='tileAnchoredToContext'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTiled:'>
<arg declared_type='BOOL' index='0' type='B' name='tiled'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tileAnchoredToContext'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='CPTLayer'>
<method selector='applyMaskToContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applySublayerMaskToContext:forSublayer:withOffset:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='context'/>
<arg declared_type='CPTLayer*' index='1' type='@' name='sublayer'/>
<arg declared_type='CGPoint' index='2' type='{CGPoint=ff}' name='offset'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='contentsScale'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='dataForPDFRepresentationOfLayer'>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='graph'>
<retval declared_type='CPTGraph*' type='@'/>
</method>
<method selector='identifier'>
<retval declared_type='id' type='@'/>
</method>
<method selector='imageOfLayer'>
<retval declared_type='UIImage*' type='^{UIImage=#^vf{?=b1b3b1b1b1b16}}'/>
</method>
<method selector='initWithFrame:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='newFrame'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='innerBorderPath'>
<retval declared_type='CGPathRef' type='^{CGPath=}'/>
</method>
<method selector='layoutAndRenderInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='logLayers'>
<retval declared_type='void' type='v'/>
</method>
<method selector='maskingPath'>
<retval declared_type='CGPathRef' type='^{CGPath=}'/>
</method>
<method selector='masksToBorder'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outerBorderPath'>
<retval declared_type='CGPathRef' type='^{CGPath=}'/>
</method>
<method selector='paddingBottom'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='paddingLeft'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='paddingRight'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='paddingTop'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='pixelAlign'>
<retval declared_type='void' type='v'/>
</method>
<method selector='recursivelyRenderInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='renderAsVectorInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentsScale:'>
<arg declared_type='CGFloat' index='0' type='f' name='contentsScale'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGraph:'>
<arg declared_type='CPTGraph*' index='0' type='@' name='graph'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIdentifier:'>
<arg declared_type='id' index='0' type='@' name='identifier'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInnerBorderPath:'>
<arg declared_type='CGPathRef' index='0' type='^{CGPath=}' name='innerBorderPath'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMasksToBorder:'>
<arg declared_type='BOOL' index='0' type='B' name='masksToBorder'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOuterBorderPath:'>
<arg declared_type='CGPathRef' index='0' type='^{CGPath=}' name='outerBorderPath'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPaddingBottom:'>
<arg declared_type='CGFloat' index='0' type='f' name='paddingBottom'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPaddingLeft:'>
<arg declared_type='CGFloat' index='0' type='f' name='paddingLeft'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPaddingRight:'>
<arg declared_type='CGFloat' index='0' type='f' name='paddingRight'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPaddingTop:'>
<arg declared_type='CGFloat' index='0' type='f' name='paddingTop'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShadow:'>
<arg declared_type='CPTShadow*' index='0' type='@' name='shadow'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shadow'>
<retval declared_type='CPTShadow*' type='@'/>
</method>
<method selector='sublayerMarginLeft:top:right:bottom:'>
<arg declared_type='CGFloat*' index='0' type='^f' name='left'/>
<arg declared_type='CGFloat*' index='1' type='^f' name='top'/>
<arg declared_type='CGFloat*' index='2' type='^f' name='right'/>
<arg declared_type='CGFloat*' index='3' type='^f' name='bottom'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sublayerMaskingPath'>
<retval declared_type='CGPathRef' type='^{CGPath=}'/>
</method>
<method selector='sublayersExcludedFromAutomaticLayout'>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='useFastRendering'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='CPTLayerAnnotation'>
<method selector='anchorLayer'>
<retval declared_type='CPTLayer*' type='@'/>
</method>
<method selector='initWithAnchorLayer:'>
<arg declared_type='CPTLayer*' index='0' type='@' name='anchorLayer'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='rectAnchor'>
<retval declared_type='CPTRectAnchor' type='i'/>
</method>
<method selector='setRectAnchor:'>
<arg declared_type='CPTRectAnchor' index='0' type='i' name='rectAnchor'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTLegend'>
<method selector='addPlot:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='allPlots'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='columnMargin'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='columnWidths'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='columnWidthsThatFit'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='equalColumns'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='equalRows'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithGraph:'>
<arg declared_type='CPTGraph*' index='0' type='@' name='graph'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithPlots:'>
<arg declared_type='NSArray*' index='0' type='@' name='newPlots'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertPlot:atIndex:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='layoutChanged'>
<retval declared_type='BOOL' type='B'/>
</method>
<method class_method='true' selector='legendWithGraph:'>
<arg declared_type='CPTGraph*' index='0' type='@' name='graph'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='legendWithPlots:'>
<arg declared_type='NSArray*' index='0' type='@' name='newPlots'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='numberOfColumns'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='numberOfRows'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='plotAtIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='index'/>
<retval declared_type='CPTPlot*' type='@'/>
</method>
<method selector='plotWithIdentifier:'>
<arg declared_type='id' index='0' type='@' name='identifier'/>
<retval declared_type='CPTPlot*' type='@'/>
</method>
<method selector='removePlot:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removePlotWithIdentifier:'>
<arg declared_type='id' index='0' type='@' name='identifier'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rowHeights'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='rowHeightsThatFit'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='rowMargin'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setColumnMargin:'>
<arg declared_type='CGFloat' index='0' type='f' name='columnMargin'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColumnWidths:'>
<arg declared_type='NSArray*' index='0' type='@' name='columnWidths'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEqualColumns:'>
<arg declared_type='BOOL' index='0' type='B' name='equalColumns'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEqualRows:'>
<arg declared_type='BOOL' index='0' type='B' name='equalRows'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayoutChanged'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfColumns:'>
<arg declared_type='NSUInteger' index='0' type='I' name='numberOfColumns'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfRows:'>
<arg declared_type='NSUInteger' index='0' type='I' name='numberOfRows'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRowHeights:'>
<arg declared_type='NSArray*' index='0' type='@' name='rowHeights'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRowMargin:'>
<arg declared_type='CGFloat' index='0' type='f' name='rowMargin'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSwatchBorderLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='swatchBorderLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSwatchCornerRadius:'>
<arg declared_type='CGFloat' index='0' type='f' name='swatchCornerRadius'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSwatchFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='swatchFill'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSwatchSize:'>
<arg declared_type='CGSize' index='0' type='{CGSize=ff}' name='swatchSize'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextStyle:'>
<arg declared_type='CPTTextStyle*' index='0' type='@' name='textStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='titleOffset'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='swatchBorderLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='swatchCornerRadius'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='swatchFill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='swatchSize'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='textStyle'>
<retval declared_type='CPTTextStyle*' type='@'/>
</method>
<method selector='titleOffset'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='CPTLegendEntry'>
<method selector='column'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='drawTitleInRect:inContext:scale:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect'/>
<arg declared_type='CGContextRef' index='1' type='^{CGContext=}' name='context'/>
<arg declared_type='CGFloat' index='2' type='f' name='scale'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='index'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='plot'>
<retval declared_type='CPTPlot*' type='@'/>
</method>
<method selector='row'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='setColumn:'>
<arg declared_type='NSUInteger' index='0' type='I' name='column'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='index'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlot:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRow:'>
<arg declared_type='NSUInteger' index='0' type='I' name='row'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextStyle:'>
<arg declared_type='CPTTextStyle*' index='0' type='@' name='textStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textStyle'>
<retval declared_type='CPTTextStyle*' type='@'/>
</method>
<method selector='titleSize'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
</class>
<class name='CPTLimitBand'>
<method selector='fill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='initWithRange:fill:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='newRange'/>
<arg declared_type='CPTFill*' index='1' type='@' name='newFill'/>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='limitBandWithRange:fill:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='newRange'/>
<arg declared_type='CPTFill*' index='1' type='@' name='newFill'/>
<retval declared_type='CPTLimitBand*' type='@'/>
</method>
<method selector='range'>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method selector='setFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='fill'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='range'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTLineCap'>
<method class_method='true' selector='barPlotLineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method class_method='true' selector='crossPlotLineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method selector='customLineCapPath'>
<retval declared_type='CGPathRef' type='^{CGPath=}'/>
</method>
<method class_method='true' selector='customLineCapWithPath:'>
<arg declared_type='CGPathRef' index='0' type='^{CGPath=}' name='aPath'/>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method class_method='true' selector='diamondPlotLineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method class_method='true' selector='ellipsePlotLineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method selector='fill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method class_method='true' selector='hexagonPlotLineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method class_method='true' selector='lineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method selector='lineCapType'>
<retval declared_type='CPTLineCapType' type='i'/>
</method>
<method selector='lineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method class_method='true' selector='openArrowPlotLineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method class_method='true' selector='pentagonPlotLineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method class_method='true' selector='rectanglePlotLineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method selector='renderAsVectorInContext:atPoint:inDirection:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='theContext'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='center'/>
<arg declared_type='CGPoint' index='2' type='{CGPoint=ff}' name='direction'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCustomLineCapPath:'>
<arg declared_type='CGPathRef' index='0' type='^{CGPath=}' name='customLineCapPath'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='fill'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineCapType:'>
<arg declared_type='CPTLineCapType' index='0' type='i' name='lineCapType'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='lineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSize:'>
<arg declared_type='CGSize' index='0' type='{CGSize=ff}' name='size'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesEvenOddClipRule:'>
<arg declared_type='BOOL' index='0' type='B' name='usesEvenOddClipRule'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='size'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method class_method='true' selector='snowPlotLineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method class_method='true' selector='solidArrowPlotLineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method class_method='true' selector='sweptArrowPlotLineCap'>
<retval declared_type='CPTLineCap*' type='@'/>
</method>
<method selector='usesEvenOddClipRule'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='CPTLineStyle'>
<method selector='dashPattern'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='lineCap'>
<retval declared_type='CGLineCap' type='i'/>
</method>
<method selector='lineColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method selector='lineJoin'>
<retval declared_type='CGLineJoin' type='i'/>
</method>
<method class_method='true' selector='lineStyle'>
<retval declared_type='id' type='@'/>
</method>
<method selector='lineWidth'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='miterLimit'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='patternPhase'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setLineStyleInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='theContext'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTMutableLineStyle'>
<method selector='dashPattern'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='lineCap'>
<retval declared_type='CGLineCap' type='i'/>
</method>
<method selector='lineColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method selector='lineJoin'>
<retval declared_type='CGLineJoin' type='i'/>
</method>
<method selector='lineWidth'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='miterLimit'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='patternPhase'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setDashPattern:'>
<arg declared_type='NSArray*' index='0' type='@' name='dashPattern'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineCap:'>
<arg declared_type='CGLineCap' index='0' type='i' name='lineCap'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineColor:'>
<arg declared_type='CPTColor*' index='0' type='@' name='lineColor'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineJoin:'>
<arg declared_type='CGLineJoin' index='0' type='i' name='lineJoin'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineWidth:'>
<arg declared_type='CGFloat' index='0' type='f' name='lineWidth'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMiterLimit:'>
<arg declared_type='CGFloat' index='0' type='f' name='miterLimit'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPatternPhase:'>
<arg declared_type='CGFloat' index='0' type='f' name='patternPhase'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTMutableNumericData'>
<method selector='byteOrder'>
<retval declared_type='CFByteOrder' type='l'/>
</method>
<method selector='convertToType:sampleBytes:byteOrder:'>
<arg declared_type='CPTDataTypeFormat' index='0' type='i' name='newDataType'/>
<arg declared_type='size_t' index='1' type='L' name='newSampleBytes'/>
<arg declared_type='CFByteOrder' index='2' type='l' name='newByteOrder'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dataType'>
<retval declared_type='CPTNumericDataType' type='{_CPTNumericDataType=iIi}'/>
</method>
<method selector='dataTypeFormat'>
<retval declared_type='CPTDataTypeFormat' type='i'/>
</method>
<method selector='initWithData:dataType:shape:'>
<arg declared_type='NSData*' index='0' type='@' name='newData'/>
<arg declared_type='CPTNumericDataType' index='1' type='{_CPTNumericDataType=iIi}' name='newDataType'/>
<arg declared_type='NSArray*' index='2' type='@' name='shapeArray'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='mutableBytes'>
<retval declared_type='void*' type='^v'/>
</method>
<method class_method='true' selector='numericDataWithData:dataType:shape:'>
<arg declared_type='NSData*' index='0' type='@' name='newData'/>
<arg declared_type='CPTNumericDataType' index='1' type='{_CPTNumericDataType=iIi}' name='newDataType'/>
<arg declared_type='NSArray*' index='2' type='@' name='shapeArray'/>
<retval declared_type='CPTMutableNumericData*' type='@'/>
</method>
<method class_method='true' selector='numericDataWithData:dataTypeString:shape:'>
<arg declared_type='NSData*' index='0' type='@' name='newData'/>
<arg declared_type='NSString*' index='1' type='@' name='newDataTypeString'/>
<arg declared_type='NSArray*' index='2' type='@' name='shapeArray'/>
<retval declared_type='CPTMutableNumericData*' type='@'/>
</method>
<method selector='sampleBytes'>
<retval declared_type='size_t' type='L'/>
</method>
<method selector='setByteOrder:'>
<arg declared_type='CFByteOrder' index='0' type='l' name='byteOrder'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDataType:'>
<arg declared_type='CPTNumericDataType' index='0' type='{_CPTNumericDataType=iIi}' name='dataType'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDataTypeFormat:'>
<arg declared_type='CPTDataTypeFormat' index='0' type='i' name='dataTypeFormat'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSampleBytes:'>
<arg declared_type='size_t' index='0' type='L' name='sampleBytes'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShape:'>
<arg declared_type='NSArray*' index='0' type='@' name='shape'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shape'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='CPTMutablePlotRange'>
<method selector='expandRangeByFactor:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='factor'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='intersectionPlotRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='otherRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='length'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='location'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='setLength:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='length'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLocation:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='location'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shiftEndToFitInRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='otherRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shiftLocationToFitInRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='otherRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unionPlotRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='otherRange'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTMutableShadow'>
<method selector='setShadowBlurRadius:'>
<arg declared_type='CGFloat' index='0' type='f' name='shadowBlurRadius'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShadowColor:'>
<arg declared_type='CPTColor*' index='0' type='@' name='shadowColor'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShadowOffset:'>
<arg declared_type='CGSize' index='0' type='{CGSize=ff}' name='shadowOffset'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shadowBlurRadius'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='shadowColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method selector='shadowOffset'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
</class>
<class name='CPTMutableTextStyle'>
<method selector='color'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method selector='fontName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fontSize'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setColor:'>
<arg declared_type='CPTColor*' index='0' type='@' name='color'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFontName:'>
<arg declared_type='NSString*' index='0' type='@' name='fontName'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFontSize:'>
<arg declared_type='CGFloat' index='0' type='f' name='fontSize'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextAlignment:'>
<arg declared_type='CPTTextAlignment' index='0' type='i' name='textAlignment'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textAlignment'>
<retval declared_type='CPTTextAlignment' type='i'/>
</method>
</class>
<class name='CPTNumericData'>
<method selector='byteOrder'>
<retval declared_type='CFByteOrder' type='l'/>
</method>
<method selector='bytes'>
<retval declared_type='void*' type='^v' const='true'/>
</method>
<method selector='convertData:dataType:toData:dataType:'>
<arg declared_type='NSData*' index='0' type='@' name='sourceData'/>
<arg declared_type='CPTNumericDataType*' index='1' type='^{_CPTNumericDataType=iIi}' name='sourceDataType'/>
<arg declared_type='NSMutableData*' index='2' type='@' name='destData'/>
<arg declared_type='CPTNumericDataType*' index='3' type='^{_CPTNumericDataType=iIi}' name='destDataType'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='data'>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='dataByConvertingToDataType:'>
<arg declared_type='CPTNumericDataType' index='0' type='{_CPTNumericDataType=iIi}' name='newDataType'/>
<retval declared_type='CPTNumericData*' type='@'/>
</method>
<method selector='dataByConvertingToType:sampleBytes:byteOrder:'>
<arg declared_type='CPTDataTypeFormat' index='0' type='i' name='newDataType'/>
<arg declared_type='size_t' index='1' type='L' name='newSampleBytes'/>
<arg declared_type='CFByteOrder' index='2' type='l' name='newByteOrder'/>
<retval declared_type='CPTNumericData*' type='@'/>
</method>
<method selector='dataType'>
<retval declared_type='CPTNumericDataType' type='{_CPTNumericDataType=iIi}'/>
</method>
<method selector='dataTypeFormat'>
<retval declared_type='CPTDataTypeFormat' type='i'/>
</method>
<method selector='initWithArray:dataType:shape:'>
<arg declared_type='NSArray*' index='0' type='@' name='newData'/>
<arg declared_type='CPTNumericDataType' index='1' type='{_CPTNumericDataType=iIi}' name='newDataType'/>
<arg declared_type='NSArray*' index='2' type='@' name='shapeArray'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithArray:dataTypeString:shape:'>
<arg declared_type='NSArray*' index='0' type='@' name='newData'/>
<arg declared_type='NSString*' index='1' type='@' name='newDataTypeString'/>
<arg declared_type='NSArray*' index='2' type='@' name='shapeArray'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithData:dataType:shape:'>
<arg declared_type='NSData*' index='0' type='@' name='newData'/>
<arg declared_type='CPTNumericDataType' index='1' type='{_CPTNumericDataType=iIi}' name='newDataType'/>
<arg declared_type='NSArray*' index='2' type='@' name='shapeArray'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithData:dataTypeString:shape:'>
<arg declared_type='NSData*' index='0' type='@' name='newData'/>
<arg declared_type='NSString*' index='1' type='@' name='newDataTypeString'/>
<arg declared_type='NSArray*' index='2' type='@' name='shapeArray'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='length'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='numberOfDimensions'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='numberOfSamples'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method class_method='true' selector='numericDataWithArray:dataType:shape:'>
<arg declared_type='NSArray*' index='0' type='@' name='newData'/>
<arg declared_type='CPTNumericDataType' index='1' type='{_CPTNumericDataType=iIi}' name='newDataType'/>
<arg declared_type='NSArray*' index='2' type='@' name='shapeArray'/>
<retval declared_type='CPTNumericData*' type='@'/>
</method>
<method class_method='true' selector='numericDataWithArray:dataTypeString:shape:'>
<arg declared_type='NSArray*' index='0' type='@' name='newData'/>
<arg declared_type='NSString*' index='1' type='@' name='newDataTypeString'/>
<arg declared_type='NSArray*' index='2' type='@' name='shapeArray'/>
<retval declared_type='CPTNumericData*' type='@'/>
</method>
<method class_method='true' selector='numericDataWithData:dataType:shape:'>
<arg declared_type='NSData*' index='0' type='@' name='newData'/>
<arg declared_type='CPTNumericDataType' index='1' type='{_CPTNumericDataType=iIi}' name='newDataType'/>
<arg declared_type='NSArray*' index='2' type='@' name='shapeArray'/>
<retval declared_type='CPTNumericData*' type='@'/>
</method>
<method class_method='true' selector='numericDataWithData:dataTypeString:shape:'>
<arg declared_type='NSData*' index='0' type='@' name='newData'/>
<arg declared_type='NSString*' index='1' type='@' name='newDataTypeString'/>
<arg declared_type='NSArray*' index='2' type='@' name='shapeArray'/>
<retval declared_type='CPTNumericData*' type='@'/>
</method>
<method selector='sampleArray'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='sampleBytes'>
<retval declared_type='size_t' type='L'/>
</method>
<method selector='samplePointer:'>
<arg declared_type='NSUInteger' index='0' type='I' name='sample'/>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='sampleValue:'>
<arg declared_type='NSUInteger' index='0' type='I' name='sample'/>
<retval declared_type='NSNumber*' type='@'/>
</method>
<method selector='shape'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='swapByteOrderForData:sampleSize:'>
<arg declared_type='NSMutableData*' index='0' type='@' name='sourceData'/>
<arg declared_type='size_t' index='1' type='L' name='sampleSize'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTPieChart'>
<method selector='borderLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='centerAnchor'>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method class_method='true' selector='defaultPieSliceColorForIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='pieSliceIndex'/>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method selector='overlayFill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='pieInnerRadius'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='pieRadius'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setBorderLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='borderLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCenterAnchor:'>
<arg declared_type='CGPoint' index='0' type='{CGPoint=ff}' name='centerAnchor'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOverlayFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='overlayFill'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPieInnerRadius:'>
<arg declared_type='CGFloat' index='0' type='f' name='pieInnerRadius'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPieRadius:'>
<arg declared_type='CGFloat' index='0' type='f' name='pieRadius'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSliceDirection:'>
<arg declared_type='CPTPieDirection' index='0' type='i' name='sliceDirection'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStartAngle:'>
<arg declared_type='CGFloat' index='0' type='f' name='startAngle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sliceDirection'>
<retval declared_type='CPTPieDirection' type='i'/>
</method>
<method selector='startAngle'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='CPTPlot'>
<method selector='alignsPointsToPixels'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='cacheNumbers:forField:'>
<arg declared_type='id' index='0' type='@' name='numbers'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='cacheNumbers:forField:atRecordIndex:'>
<arg declared_type='id' index='0' type='@' name='numbers'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<arg declared_type='NSUInteger' index='2' type='I' name='index'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='cachePrecision'>
<retval declared_type='CPTPlotCachePrecision' type='i'/>
</method>
<method selector='cachedDataCount'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='cachedDecimalForField:recordIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='fieldEnum'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='cachedDoubleForField:recordIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='fieldEnum'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='double' type='d'/>
</method>
<method selector='cachedNumberForField:recordIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='fieldEnum'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='NSNumber*' type='@'/>
</method>
<method selector='cachedNumbersForField:'>
<arg declared_type='NSUInteger' index='0' type='I' name='fieldEnum'/>
<retval declared_type='CPTMutableNumericData*' type='@'/>
</method>
<method selector='dataNeedsReloading'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='dataSource'>
<retval declared_type='id' type='@'/>
</method>
<method selector='decimalDataType'>
<retval declared_type='CPTNumericDataType' type='{_CPTNumericDataType=iIi}'/>
</method>
<method selector='deleteDataInIndexRange:'>
<arg declared_type='NSRange' index='0' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='doubleDataType'>
<retval declared_type='CPTNumericDataType' type='{_CPTNumericDataType=iIi}'/>
</method>
<method selector='doublePrecisionCache'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawSwatchForLegend:atIndex:inRect:inContext:'>
<arg declared_type='CPTLegend*' index='0' type='@' name='legend'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<arg declared_type='CGRect' index='2' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect'/>
<arg declared_type='CGContextRef' index='3' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fieldIdentifiers'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='fieldIdentifiersForCoordinate:'>
<arg declared_type='CPTCoordinate' index='0' type='i' name='coord'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='insertDataAtIndex:numberOfRecords:'>
<arg declared_type='NSUInteger' index='0' type='I' name='index'/>
<arg declared_type='NSUInteger' index='1' type='I' name='numberOfRecords'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='labelField'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='labelFormatter'>
<retval declared_type='NSNumberFormatter*' type='@'/>
</method>
<method selector='labelOffset'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='labelRotation'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='labelShadow'>
<retval declared_type='CPTShadow*' type='@'/>
</method>
<method selector='labelTextStyle'>
<retval declared_type='CPTTextStyle*' type='@'/>
</method>
<method selector='needsRelabel'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='numberOfFields'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='numberOfLegendEntries'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='numbersFromDataSourceForField:recordIndexRange:'>
<arg declared_type='NSUInteger' index='0' type='I' name='fieldEnum'/>
<arg declared_type='NSRange' index='1' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='plotArea'>
<retval declared_type='CPTPlotArea*' type='@'/>
</method>
<method selector='plotRangeForCoordinate:'>
<arg declared_type='CPTCoordinate' index='0' type='i' name='coord'/>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method selector='plotRangeForField:'>
<arg declared_type='NSUInteger' index='0' type='I' name='fieldEnum'/>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method selector='plotSpace'>
<retval declared_type='CPTPlotSpace*' type='@'/>
</method>
<method selector='positionLabelAnnotation:forIndex:'>
<arg declared_type='CPTPlotSpaceAnnotation*' index='0' type='@' name='label'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='relabel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='relabelIndexRange:'>
<arg declared_type='NSRange' index='0' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reloadData'>
<retval declared_type='void' type='v'/>
</method>
<method selector='reloadDataIfNeeded'>
<retval declared_type='void' type='v'/>
</method>
<method selector='reloadDataInIndexRange:'>
<arg declared_type='NSRange' index='0' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='repositionAllLabelAnnotations'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlignsPointsToPixels:'>
<arg declared_type='BOOL' index='0' type='B' name='alignsPointsToPixels'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCachePrecision:'>
<arg declared_type='CPTPlotCachePrecision' index='0' type='i' name='cachePrecision'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDataNeedsReloading'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDataSource:'>
<arg declared_type='id' index='0' type='@' name='dataSource'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelField:'>
<arg declared_type='NSUInteger' index='0' type='I' name='labelField'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelFormatter:'>
<arg declared_type='NSNumberFormatter*' index='0' type='@' name='labelFormatter'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='labelOffset'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelRotation:'>
<arg declared_type='CGFloat' index='0' type='f' name='labelRotation'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelShadow:'>
<arg declared_type='CPTShadow*' index='0' type='@' name='labelShadow'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabelTextStyle:'>
<arg declared_type='CPTTextStyle*' index='0' type='@' name='labelTextStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsRelabel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotSpace:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='plotSpace'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg declared_type='NSString*' index='0' type='@' name='title'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='titleForLegendEntryAtIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='index'/>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='CPTPlotArea'>
<method selector='axisLabelGroup'>
<retval declared_type='CPTAxisLabelGroup*' type='@'/>
</method>
<method selector='axisSet'>
<retval declared_type='CPTAxisSet*' type='@'/>
</method>
<method selector='axisTitleGroup'>
<retval declared_type='CPTAxisLabelGroup*' type='@'/>
</method>
<method selector='borderLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='fill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='majorGridLineGroup'>
<retval declared_type='CPTGridLineGroup*' type='@'/>
</method>
<method selector='minorGridLineGroup'>
<retval declared_type='CPTGridLineGroup*' type='@'/>
</method>
<method selector='plotGroup'>
<retval declared_type='CPTPlotGroup*' type='@'/>
</method>
<method selector='setAxisLabelGroup:'>
<arg declared_type='CPTAxisLabelGroup*' index='0' type='@' name='axisLabelGroup'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAxisSet:'>
<arg declared_type='CPTAxisSet*' index='0' type='@' name='axisSet'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAxisSetLayersForType:'>
<arg declared_type='CPTGraphLayerType' index='0' type='i' name='layerType'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAxisTitleGroup:'>
<arg declared_type='CPTAxisLabelGroup*' index='0' type='@' name='axisTitleGroup'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBorderLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='borderLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='fill'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMajorGridLineGroup:'>
<arg declared_type='CPTGridLineGroup*' index='0' type='@' name='majorGridLineGroup'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinorGridLineGroup:'>
<arg declared_type='CPTGridLineGroup*' index='0' type='@' name='minorGridLineGroup'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotGroup:'>
<arg declared_type='CPTPlotGroup*' index='0' type='@' name='plotGroup'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTopDownLayerOrder:'>
<arg declared_type='NSArray*' index='0' type='@' name='topDownLayerOrder'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sublayerIndexForAxis:layerType:'>
<arg declared_type='CPTAxis*' index='0' type='@' name='axis'/>
<arg declared_type='CPTGraphLayerType' index='1' type='i' name='layerType'/>
<retval declared_type='unsigned int' type='I'/>
</method>
<method selector='topDownLayerOrder'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='updateAxisSetLayersForType:'>
<arg declared_type='CPTGraphLayerType' index='0' type='i' name='layerType'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTPlotAreaFrame'>
<method selector='axisSet'>
<retval declared_type='CPTAxisSet*' type='@'/>
</method>
<method selector='plotArea'>
<retval declared_type='CPTPlotArea*' type='@'/>
</method>
<method selector='plotGroup'>
<retval declared_type='CPTPlotGroup*' type='@'/>
</method>
<method selector='setAxisSet:'>
<arg declared_type='CPTAxisSet*' index='0' type='@' name='axisSet'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotGroup:'>
<arg declared_type='CPTPlotGroup*' index='0' type='@' name='plotGroup'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTPlotGroup'>
<method selector='addPlot:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removePlot:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTPlotRange'>
<method selector='compareToDecimal:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='number'/>
<retval declared_type='CPTPlotRangeComparisonResult' type='i'/>
</method>
<method selector='compareToDouble:'>
<arg declared_type='double' index='0' type='d' name='number'/>
<retval declared_type='CPTPlotRangeComparisonResult' type='i'/>
</method>
<method selector='compareToNumber:'>
<arg declared_type='NSNumber*' index='0' type='@' name='number'/>
<retval declared_type='CPTPlotRangeComparisonResult' type='i'/>
</method>
<method selector='contains:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='number'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='containsDouble:'>
<arg declared_type='double' index='0' type='d' name='number'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='end'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='endDouble'>
<retval declared_type='double' type='d'/>
</method>
<method selector='initWithLocation:length:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='loc'/>
<arg declared_type='NSDecimal' index='1' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='len'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isEqualToRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='otherRange'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='length'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='lengthDouble'>
<retval declared_type='double' type='d'/>
</method>
<method selector='location'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='locationDouble'>
<retval declared_type='double' type='d'/>
</method>
<method selector='maxLimit'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='maxLimitDouble'>
<retval declared_type='double' type='d'/>
</method>
<method selector='midPoint'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='midPointDouble'>
<retval declared_type='double' type='d'/>
</method>
<method selector='minLimit'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='minLimitDouble'>
<retval declared_type='double' type='d'/>
</method>
<method class_method='true' selector='plotRangeWithLocation:length:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='loc'/>
<arg declared_type='NSDecimal' index='1' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='len'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CPTPlotSpace'>
<method selector='allowsUserInteraction'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='doublePrecisionPlotPoint:forPlotAreaViewPoint:'>
<arg declared_type='double*' index='0' type='^d' name='plotPoint'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='point'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='graph'>
<retval declared_type='CPTGraph*' type='@'/>
</method>
<method selector='identifier'>
<retval declared_type='id' type='@'/>
</method>
<method selector='plotAreaViewPointForDoublePrecisionPlotPoint:'>
<arg declared_type='double*' index='0' type='^d' name='plotPoint'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='plotAreaViewPointForPlotPoint:'>
<arg declared_type='NSDecimal*' index='0' type='^{_NSDecimal=b8b4b1b1b18[8S]}' name='plotPoint'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='plotPoint:forPlotAreaViewPoint:'>
<arg declared_type='NSDecimal*' index='0' type='^{_NSDecimal=b8b4b1b1b18[8S]}' name='plotPoint'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='point'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='plotRangeForCoordinate:'>
<arg declared_type='CPTCoordinate' index='0' type='i' name='coordinate'/>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method selector='scaleBy:aboutPoint:'>
<arg declared_type='CGFloat' index='0' type='f' name='interactionScale'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='interactionPoint'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scaleToFitPlots:'>
<arg declared_type='NSArray*' index='0' type='@' name='plots'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scaleTypeForCoordinate:'>
<arg declared_type='CPTCoordinate' index='0' type='i' name='coordinate'/>
<retval declared_type='CPTScaleType' type='i'/>
</method>
<method selector='setAllowsUserInteraction:'>
<arg declared_type='BOOL' index='0' type='B' name='allowsUserInteraction'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg declared_type='id' index='0' type='@' name='delegate'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGraph:'>
<arg declared_type='CPTGraph*' index='0' type='@' name='graph'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIdentifier:'>
<arg declared_type='id' index='0' type='@' name='identifier'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotRange:forCoordinate:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='newRange'/>
<arg declared_type='CPTCoordinate' index='1' type='i' name='coordinate'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScaleType:forCoordinate:'>
<arg declared_type='CPTScaleType' index='0' type='i' name='newType'/>
<arg declared_type='CPTCoordinate' index='1' type='i' name='coordinate'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTPlotSpaceAnnotation'>
<method selector='anchorPlotPoint'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='initWithPlotSpace:anchorPlotPoint:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='NSArray*' index='1' type='@' name='plotPoint'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='plotSpace'>
<retval declared_type='CPTPlotSpace*' type='@'/>
</method>
<method selector='setAnchorPlotPoint:'>
<arg declared_type='NSArray*' index='0' type='@' name='anchorPlotPoint'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTPlotSymbol'>
<method class_method='true' selector='crossPlotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method class_method='true' selector='customPlotSymbolWithPath:'>
<arg declared_type='CGPathRef' index='0' type='^{CGPath=}' name='aPath'/>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method selector='customSymbolPath'>
<retval declared_type='CGPathRef' type='^{CGPath=}'/>
</method>
<method class_method='true' selector='dashPlotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method class_method='true' selector='diamondPlotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method class_method='true' selector='ellipsePlotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method selector='fill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method class_method='true' selector='hexagonPlotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method selector='lineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method class_method='true' selector='pentagonPlotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method class_method='true' selector='plotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method class_method='true' selector='plusPlotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method class_method='true' selector='rectanglePlotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method selector='renderAsVectorInContext:atPoint:scale:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='theContext'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='center'/>
<arg declared_type='CGFloat' index='2' type='f' name='scale'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='renderInContext:atPoint:scale:alignToPixels:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='theContext'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='center'/>
<arg declared_type='CGFloat' index='2' type='f' name='scale'/>
<arg declared_type='BOOL' index='3' type='B' name='alignToPixels'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCustomSymbolPath:'>
<arg declared_type='CGPathRef' index='0' type='^{CGPath=}' name='customSymbolPath'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='fill'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='lineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShadow:'>
<arg declared_type='CPTShadow*' index='0' type='@' name='shadow'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSize:'>
<arg declared_type='CGSize' index='0' type='{CGSize=ff}' name='size'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSymbolType:'>
<arg declared_type='CPTPlotSymbolType' index='0' type='i' name='symbolType'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesEvenOddClipRule:'>
<arg declared_type='BOOL' index='0' type='B' name='usesEvenOddClipRule'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shadow'>
<retval declared_type='CPTShadow*' type='@'/>
</method>
<method selector='size'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method class_method='true' selector='snowPlotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method class_method='true' selector='starPlotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method selector='symbolType'>
<retval declared_type='CPTPlotSymbolType' type='i'/>
</method>
<method class_method='true' selector='trianglePlotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method selector='usesEvenOddClipRule'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='CPTRangePlot'>
<method selector='areaFill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='barLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='barWidth'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='gapHeight'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='gapWidth'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setAreaFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='areaFill'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBarLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='barLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBarWidth:'>
<arg declared_type='CGFloat' index='0' type='f' name='barWidth'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGapHeight:'>
<arg declared_type='CGFloat' index='0' type='f' name='gapHeight'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGapWidth:'>
<arg declared_type='CGFloat' index='0' type='f' name='gapWidth'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTScatterPlot'>
<method selector='areaBaseValue'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='areaBaseValue2'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='areaFill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='areaFill2'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='dataLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='indexOfVisiblePointClosestToPlotAreaPoint:'>
<arg declared_type='CGPoint' index='0' type='{CGPoint=ff}' name='viewPoint'/>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='interpolation'>
<retval declared_type='CPTScatterPlotInterpolation' type='i'/>
</method>
<method selector='plotAreaPointOfVisiblePointAtIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='index'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='plotSymbol'>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method selector='plotSymbolForRecordIndex:'>
<arg declared_type='NSUInteger' index='0' type='I' name='index'/>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method selector='plotSymbolMarginForHitDetection'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setAreaBaseValue2:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='areaBaseValue2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAreaBaseValue:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='areaBaseValue'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAreaFill2:'>
<arg declared_type='CPTFill*' index='0' type='@' name='areaFill2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAreaFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='areaFill'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDataLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='dataLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInterpolation:'>
<arg declared_type='CPTScatterPlotInterpolation' index='0' type='i' name='interpolation'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotSymbol:'>
<arg declared_type='CPTPlotSymbol*' index='0' type='@' name='plotSymbol'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotSymbolMarginForHitDetection:'>
<arg declared_type='CGFloat' index='0' type='f' name='plotSymbolMarginForHitDetection'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTShadow'>
<method selector='setShadowInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='theContext'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='shadow'>
<retval declared_type='id' type='@'/>
</method>
<method selector='shadowBlurRadius'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='shadowColor'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method selector='shadowOffset'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
</class>
<class name='CPTTextLayer'>
<method selector='initWithText:'>
<arg declared_type='NSString*' index='0' type='@' name='newText'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithText:style:'>
<arg declared_type='NSString*' index='0' type='@' name='newText'/>
<arg declared_type='CPTTextStyle*' index='1' type='@' name='newStyle'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setText:'>
<arg declared_type='NSString*' index='0' type='@' name='text'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextStyle:'>
<arg declared_type='CPTTextStyle*' index='0' type='@' name='textStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeThatFits'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='sizeToFit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='text'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='textStyle'>
<retval declared_type='CPTTextStyle*' type='@'/>
</method>
</class>
<class name='CPTTextStyle'>
<method selector='color'>
<retval declared_type='CPTColor*' type='@'/>
</method>
<method selector='fontName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fontSize'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='textAlignment'>
<retval declared_type='CPTTextAlignment' type='i'/>
</method>
<method class_method='true' selector='textStyle'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CPTTheme'>
<method selector='applyThemeToAxisSet:'>
<arg declared_type='CPTAxisSet*' index='0' type='@' name='axisSet'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applyThemeToBackground:'>
<arg declared_type='CPTGraph*' index='0' type='@' name='graph'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applyThemeToGraph:'>
<arg declared_type='CPTGraph*' index='0' type='@' name='graph'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applyThemeToPlotArea:'>
<arg declared_type='CPTPlotAreaFrame*' index='0' type='@' name='plotAreaFrame'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='graphClass'>
<retval declared_type='Class' type='#'/>
</method>
<method class_method='true' selector='name'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='newGraph'>
<retval declared_type='id' type='@'/>
</method>
<method class_method='true' selector='registerTheme:'>
<arg declared_type='Class' index='0' type='#' name='themeClass'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGraphClass:'>
<arg declared_type='Class' index='0' type='#' name='graphClass'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='themeClasses'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method class_method='true' selector='themeNamed:'>
<arg declared_type='NSString*' index='0' type='@' name='theme'/>
<retval declared_type='CPTTheme*' type='@'/>
</method>
</class>
<class name='CPTTimeFormatter'>
<method selector='dateFormatter'>
<retval declared_type='NSDateFormatter*' type='@'/>
</method>
<method selector='initWithDateFormatter:'>
<arg declared_type='NSDateFormatter*' index='0' type='@' name='aDateFormatter'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='referenceDate'>
<retval declared_type='NSDate*' type='@'/>
</method>
<method selector='setDateFormatter:'>
<arg declared_type='NSDateFormatter*' index='0' type='@' name='dateFormatter'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setReferenceDate:'>
<arg declared_type='NSDate*' index='0' type='@' name='referenceDate'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTTradingRangePlot'>
<method selector='barCornerRadius'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='barWidth'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='decreaseFill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='decreaseLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='increaseFill'>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='increaseLineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='lineStyle'>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='plotStyle'>
<retval declared_type='CPTTradingRangePlotStyle' type='i'/>
</method>
<method selector='setBarCornerRadius:'>
<arg declared_type='CGFloat' index='0' type='f' name='barCornerRadius'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBarWidth:'>
<arg declared_type='CGFloat' index='0' type='f' name='barWidth'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDecreaseFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='decreaseFill'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDecreaseLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='decreaseLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIncreaseFill:'>
<arg declared_type='CPTFill*' index='0' type='@' name='increaseFill'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIncreaseLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='increaseLineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineStyle:'>
<arg declared_type='CPTLineStyle*' index='0' type='@' name='lineStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlotStyle:'>
<arg declared_type='CPTTradingRangePlotStyle' index='0' type='i' name='plotStyle'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStickLength:'>
<arg declared_type='CGFloat' index='0' type='f' name='stickLength'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stickLength'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='CPTXYAxis'>
<method selector='axisConstraints'>
<retval declared_type='CPTConstraints*' type='@'/>
</method>
<method selector='orthogonalCoordinateDecimal'>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='setAxisConstraints:'>
<arg declared_type='CPTConstraints*' index='0' type='@' name='axisConstraints'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOrthogonalCoordinateDecimal:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='orthogonalCoordinateDecimal'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='CPTXYAxisSet'>
<method selector='xAxis'>
<retval declared_type='CPTXYAxis*' type='@'/>
</method>
<method selector='yAxis'>
<retval declared_type='CPTXYAxis*' type='@'/>
</method>
</class>
<class name='CPTXYGraph'>
<method selector='initWithFrame:xScaleType:yScaleType:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='newFrame'/>
<arg declared_type='CPTScaleType' index='1' type='i' name='newXScaleType'/>
<arg declared_type='CPTScaleType' index='2' type='i' name='newYScaleType'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CPTXYPlotSpace'>
<method selector='globalXRange'>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method selector='globalYRange'>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method selector='setGlobalXRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='globalXRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGlobalYRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='globalYRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setXRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='xRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setXScaleType:'>
<arg declared_type='CPTScaleType' index='0' type='i' name='xScaleType'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setYRange:'>
<arg declared_type='CPTPlotRange*' index='0' type='@' name='yRange'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setYScaleType:'>
<arg declared_type='CPTScaleType' index='0' type='i' name='yScaleType'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='xRange'>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method selector='xScaleType'>
<retval declared_type='CPTScaleType' type='i'/>
</method>
<method selector='yRange'>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method selector='yScaleType'>
<retval declared_type='CPTScaleType' type='i'/>
</method>
</class>
<class name='NSCoder'>
<method selector='decodeCGFloatForKey:'>
<arg declared_type='NSString*' index='0' type='@' name='key'/>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='decodeCPTPointForKey:'>
<arg declared_type='NSString*' index='0' type='@' name='key'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='decodeCPTRectForKey:'>
<arg declared_type='NSString*' index='0' type='@' name='key'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</method>
<method selector='decodeCPTSizeForKey:'>
<arg declared_type='NSString*' index='0' type='@' name='key'/>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='decodeDecimalForKey:'>
<arg declared_type='NSString*' index='0' type='@' name='key'/>
<retval declared_type='NSDecimal' type='{_NSDecimal=b8b4b1b1b18[8S]}'/>
</method>
<method selector='encodeCGColorSpace:forKey:'>
<arg declared_type='CGColorSpaceRef' index='0' type='^{CGColorSpace=}' name='colorSpace'/>
<arg declared_type='NSString*' index='1' type='@' name='key'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='encodeCGFloat:forKey:'>
<arg declared_type='CGFloat' index='0' type='f' name='number'/>
<arg declared_type='NSString*' index='1' type='@' name='key'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='encodeCGImage:forKey:'>
<arg declared_type='CGImageRef' index='0' type='^{CGImage=}' name='image'/>
<arg declared_type='NSString*' index='1' type='@' name='key'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='encodeCGPath:forKey:'>
<arg declared_type='CGPathRef' index='0' type='^{CGPath=}' name='path'/>
<arg declared_type='NSString*' index='1' type='@' name='key'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='encodeCPTPoint:forKey:'>
<arg declared_type='CGPoint' index='0' type='{CGPoint=ff}' name='point'/>
<arg declared_type='NSString*' index='1' type='@' name='key'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='encodeCPTRect:forKey:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect'/>
<arg declared_type='NSString*' index='1' type='@' name='key'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='encodeCPTSize:forKey:'>
<arg declared_type='CGSize' index='0' type='{CGSize=ff}' name='size'/>
<arg declared_type='NSString*' index='1' type='@' name='key'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='encodeDecimal:forKey:'>
<arg declared_type='NSDecimal' index='0' type='{_NSDecimal=b8b4b1b1b18[8S]}' name='number'/>
<arg declared_type='NSString*' index='1' type='@' name='key'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='newCGColorSpaceDecodeForKey:'>
<arg declared_type='NSString*' index='0' type='@' name='key'/>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method selector='newCGImageDecodeForKey:'>
<arg declared_type='NSString*' index='0' type='@' name='key'/>
<retval declared_type='CGImageRef' type='^{CGImage=}'/>
</method>
<method selector='newCGPathDecodeForKey:'>
<arg declared_type='NSString*' index='0' type='@' name='key'/>
<retval declared_type='CGPathRef' type='^{CGPath=}'/>
</method>
</class>
<class name='NSNumber'>
<method selector='cgFloatValue'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='decimalNumber'>
<retval declared_type='NSDecimalNumber*' type='@'/>
</method>
<method selector='initWithCGFloat:'>
<arg declared_type='CGFloat' index='0' type='f' name='number'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isGreaterThan:'>
<arg declared_type='NSNumber*' index='0' type='@' name='other'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isGreaterThanOrEqualTo:'>
<arg declared_type='NSNumber*' index='0' type='@' name='other'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isLessThan:'>
<arg declared_type='NSNumber*' index='0' type='@' name='other'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isLessThanOrEqualTo:'>
<arg declared_type='NSNumber*' index='0' type='@' name='other'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method class_method='true' selector='numberWithCGFloat:'>
<arg declared_type='CGFloat' index='0' type='f' name='number'/>
<retval declared_type='NSNumber*' type='@'/>
</method>
</class>
<class name='NSObject'>
<method selector='axis:shouldUpdateAxisLabelsAtLocations:'>
<arg declared_type='CPTAxis*' index='0' type='@' name='axis'/>
<arg declared_type='NSSet*' index='1' type='@' name='locations'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='axis:shouldUpdateMinorAxisLabelsAtLocations:'>
<arg declared_type='CPTAxis*' index='0' type='@' name='axis'/>
<arg declared_type='NSSet*' index='1' type='@' name='locations'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='axisDidRelabel:'>
<arg declared_type='CPTAxis*' index='0' type='@' name='axis'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='axisShouldRelabel:'>
<arg declared_type='CPTAxis*' index='0' type='@' name='axis'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='barFillForBarPlot:recordIndex:'>
<arg declared_type='CPTBarPlot*' index='0' type='@' name='barPlot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='barLineStyleForBarPlot:recordIndex:'>
<arg declared_type='CPTBarPlot*' index='0' type='@' name='barPlot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method selector='barPlot:barWasSelectedAtRecordIndex:'>
<arg declared_type='CPTBarPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dataForPlot:field:recordIndexRange:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<arg declared_type='NSRange' index='2' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='CPTNumericData*' type='@'/>
</method>
<method selector='dataLabelForPlot:recordIndex:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CPTLayer*' type='@'/>
</method>
<method selector='doubleForPlot:field:recordIndex:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<arg declared_type='NSUInteger' index='2' type='I' name='index'/>
<retval declared_type='double' type='d'/>
</method>
<method selector='doublesForPlot:field:recordIndexRange:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<arg declared_type='NSRange' index='2' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='double*' type='^d'/>
</method>
<method selector='legend:shouldDrawSwatchAtIndex:forPlot:inRect:inContext:'>
<arg declared_type='CPTLegend*' index='0' type='@' name='legend'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<arg declared_type='CPTPlot*' index='2' type='@' name='plot'/>
<arg declared_type='CGRect' index='3' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect'/>
<arg declared_type='CGContextRef' index='4' type='^{CGContext=}' name='context'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='legendTitleForBarPlot:recordIndex:'>
<arg declared_type='CPTBarPlot*' index='0' type='@' name='barPlot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='legendTitleForPieChart:recordIndex:'>
<arg declared_type='CPTPieChart*' index='0' type='@' name='pieChart'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='numberForPlot:field:recordIndex:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<arg declared_type='NSUInteger' index='2' type='I' name='index'/>
<retval declared_type='NSNumber*' type='@'/>
</method>
<method selector='numberOfRecordsForPlot:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='numbersForPlot:field:recordIndexRange:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<arg declared_type='NSRange' index='2' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='pieChart:sliceWasSelectedAtRecordIndex:'>
<arg declared_type='CPTPieChart*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='plotSpace:didChangePlotRangeForCoordinate:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='CPTCoordinate' index='1' type='i' name='coordinate'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='plotSpace:shouldHandlePointingDeviceCancelledEvent:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='id' index='1' type='@' name='event'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='plotSpace:shouldHandlePointingDeviceDownEvent:atPoint:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='id' index='1' type='@' name='event'/>
<arg declared_type='CGPoint' index='2' type='{CGPoint=ff}' name='point'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='plotSpace:shouldHandlePointingDeviceDraggedEvent:atPoint:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='id' index='1' type='@' name='event'/>
<arg declared_type='CGPoint' index='2' type='{CGPoint=ff}' name='point'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='plotSpace:shouldHandlePointingDeviceUpEvent:atPoint:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='id' index='1' type='@' name='event'/>
<arg declared_type='CGPoint' index='2' type='{CGPoint=ff}' name='point'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='plotSpace:shouldScaleBy:aboutPoint:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='CGFloat' index='1' type='f' name='interactionScale'/>
<arg declared_type='CGPoint' index='2' type='{CGPoint=ff}' name='interactionPoint'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='plotSpace:willChangePlotRangeTo:forCoordinate:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='CPTPlotRange*' index='1' type='@' name='newRange'/>
<arg declared_type='CPTCoordinate' index='2' type='i' name='coordinate'/>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method selector='plotSpace:willDisplaceBy:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='proposedDisplacementVector'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='pointingDeviceCancelledEvent:'>
<arg declared_type='id' index='0' type='@' name='event'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pointingDeviceDownEvent:atPoint:'>
<arg declared_type='id' index='0' type='@' name='event'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='interactionPoint'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pointingDeviceDraggedEvent:atPoint:'>
<arg declared_type='id' index='0' type='@' name='event'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='interactionPoint'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pointingDeviceUpEvent:atPoint:'>
<arg declared_type='id' index='0' type='@' name='event'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='interactionPoint'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='radialOffsetForPieChart:recordIndex:'>
<arg declared_type='CPTPieChart*' index='0' type='@' name='pieChart'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='scatterPlot:plotSymbolWasSelectedAtRecordIndex:'>
<arg declared_type='CPTScatterPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sliceFillForPieChart:recordIndex:'>
<arg declared_type='CPTPieChart*' index='0' type='@' name='pieChart'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method selector='symbolForScatterPlot:recordIndex:'>
<arg declared_type='CPTScatterPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method selector='symbolsForScatterPlot:recordIndexRange:'>
<arg declared_type='CPTScatterPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSRange' index='1' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='NSString'>
<method selector='drawInRect:withTextStyle:inContext:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect'/>
<arg declared_type='CPTTextStyle*' index='1' type='@' name='style'/>
<arg declared_type='CGContextRef' index='2' type='^{CGContext=}' name='context'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeWithTextStyle:'>
<arg declared_type='CPTTextStyle*' index='0' type='@' name='style'/>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
</class>
<class name='_CPTConstraintsFixed'>
<method selector='initWithLowerOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='newOffset'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithUpperOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='newOffset'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isEqualToConstraint:'>
<arg declared_type='CPTConstraints*' index='0' type='@' name='otherConstraint'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='positionForLowerBound:upperBound:'>
<arg declared_type='CGFloat' index='0' type='f' name='lowerBound'/>
<arg declared_type='CGFloat' index='1' type='f' name='upperBound'/>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='_CPTConstraintsRelative'>
<method selector='initWithRelativeOffset:'>
<arg declared_type='CGFloat' index='0' type='f' name='newOffset'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isEqualToConstraint:'>
<arg declared_type='CPTConstraints*' index='0' type='@' name='otherConstraint'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='positionForLowerBound:upperBound:'>
<arg declared_type='CGFloat' index='0' type='f' name='lowerBound'/>
<arg declared_type='CGFloat' index='1' type='f' name='upperBound'/>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='_CPTFillColor'>
<method selector='fillPathInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='theContext'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fillRect:inContext:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='theRect'/>
<arg declared_type='CGContextRef' index='1' type='^{CGContext=}' name='theContext'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithColor:'>
<arg declared_type='CPTColor*' index='0' type='@' name='aCcolor'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='_CPTFillGradient'>
<method selector='fillPathInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='theContext'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fillRect:inContext:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='theRect'/>
<arg declared_type='CGContextRef' index='1' type='^{CGContext=}' name='theContext'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithGradient:'>
<arg declared_type='CPTGradient*' index='0' type='@' name='aGradient'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='_CPTFillImage'>
<method selector='fillPathInContext:'>
<arg declared_type='CGContextRef' index='0' type='^{CGContext=}' name='theContext'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fillRect:inContext:'>
<arg declared_type='CGRect' index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='theRect'/>
<arg declared_type='CGContextRef' index='1' type='^{CGContext=}' name='theContext'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithImage:'>
<arg declared_type='CPTImage*' index='0' type='@' name='anImage'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<informal_protocol name='CPTAxisDelegate'>
<method type='B16@0:4@8@12' selector='axis:shouldUpdateAxisLabelsAtLocations:'>
<arg declared_type='CPTAxis*' index='0' type='@' name='axis'/>
<arg declared_type='NSSet*' index='1' type='@' name='locations'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type='B16@0:4@8@12' selector='axis:shouldUpdateMinorAxisLabelsAtLocations:'>
<arg declared_type='CPTAxis*' index='0' type='@' name='axis'/>
<arg declared_type='NSSet*' index='1' type='@' name='locations'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type='v12@0:4@8' selector='axisDidRelabel:'>
<arg declared_type='CPTAxis*' index='0' type='@' name='axis'/>
<retval declared_type='void' type='v'/>
</method>
<method type='B12@0:4@8' selector='axisShouldRelabel:'>
<arg declared_type='CPTAxis*' index='0' type='@' name='axis'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='CPTBarPlotDataSource'>
<method type='@16@0:4@8I12' selector='barFillForBarPlot:recordIndex:'>
<arg declared_type='CPTBarPlot*' index='0' type='@' name='barPlot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CPTFill*' type='@'/>
</method>
<method type='@16@0:4@8I12' selector='barLineStyleForBarPlot:recordIndex:'>
<arg declared_type='CPTBarPlot*' index='0' type='@' name='barPlot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CPTLineStyle*' type='@'/>
</method>
<method type='@16@0:4@8I12' selector='legendTitleForBarPlot:recordIndex:'>
<arg declared_type='CPTBarPlot*' index='0' type='@' name='barPlot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='NSString*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='CPTBarPlotDelegate'>
<method type='v16@0:4@8I12' selector='barPlot:barWasSelectedAtRecordIndex:'>
<arg declared_type='CPTBarPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='CPTLegendDelegate'>
<method type='B40@0:4@8I12@16{CGRect={CGPoint=ff}{CGSize=ff}}20^{CGContext=}36' selector='legend:shouldDrawSwatchAtIndex:forPlot:inRect:inContext:'>
<arg declared_type='CPTLegend*' index='0' type='@' name='legend'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<arg declared_type='CPTPlot*' index='2' type='@' name='plot'/>
<arg declared_type='CGRect' index='3' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='rect'/>
<arg declared_type='CGContextRef' index='4' type='^{CGContext=}' name='context'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='CPTPieChartDataSource'>
<method type='@16@0:4@8I12' selector='legendTitleForPieChart:recordIndex:'>
<arg declared_type='CPTPieChart*' index='0' type='@' name='pieChart'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type='f16@0:4@8I12' selector='radialOffsetForPieChart:recordIndex:'>
<arg declared_type='CPTPieChart*' index='0' type='@' name='pieChart'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CGFloat' type='f'/>
</method>
<method type='@16@0:4@8I12' selector='sliceFillForPieChart:recordIndex:'>
<arg declared_type='CPTPieChart*' index='0' type='@' name='pieChart'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CPTFill*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='CPTPieChartDelegate'>
<method type='v16@0:4@8I12' selector='pieChart:sliceWasSelectedAtRecordIndex:'>
<arg declared_type='CPTPieChart*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='CPTPlotDataSource'>
<method type='@24@0:4@8I12{_NSRange=II}16' selector='dataForPlot:field:recordIndexRange:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<arg declared_type='NSRange' index='2' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='CPTNumericData*' type='@'/>
</method>
<method type='@16@0:4@8I12' selector='dataLabelForPlot:recordIndex:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CPTLayer*' type='@'/>
</method>
<method type='d20@0:4@8I12I16' selector='doubleForPlot:field:recordIndex:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<arg declared_type='NSUInteger' index='2' type='I' name='index'/>
<retval declared_type='double' type='d'/>
</method>
<method type='^d24@0:4@8I12{_NSRange=II}16' selector='doublesForPlot:field:recordIndexRange:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<arg declared_type='NSRange' index='2' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='double*' type='^d'/>
</method>
<method type='@20@0:4@8I12I16' selector='numberForPlot:field:recordIndex:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<arg declared_type='NSUInteger' index='2' type='I' name='index'/>
<retval declared_type='NSNumber*' type='@'/>
</method>
<method type='I12@0:4@8' selector='numberOfRecordsForPlot:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method type='@24@0:4@8I12{_NSRange=II}16' selector='numbersForPlot:field:recordIndexRange:'>
<arg declared_type='CPTPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='fieldEnum'/>
<arg declared_type='NSRange' index='2' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='NSArray*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='CPTPlotSpaceDelegate'>
<method type='v16@0:4@8i12' selector='plotSpace:didChangePlotRangeForCoordinate:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='CPTCoordinate' index='1' type='i' name='coordinate'/>
<retval declared_type='void' type='v'/>
</method>
<method type='B16@0:4@8@12' selector='plotSpace:shouldHandlePointingDeviceCancelledEvent:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='id' index='1' type='@' name='event'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type='B24@0:4@8@12{CGPoint=ff}16' selector='plotSpace:shouldHandlePointingDeviceDownEvent:atPoint:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='id' index='1' type='@' name='event'/>
<arg declared_type='CGPoint' index='2' type='{CGPoint=ff}' name='point'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type='B24@0:4@8@12{CGPoint=ff}16' selector='plotSpace:shouldHandlePointingDeviceDraggedEvent:atPoint:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='id' index='1' type='@' name='event'/>
<arg declared_type='CGPoint' index='2' type='{CGPoint=ff}' name='point'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type='B24@0:4@8@12{CGPoint=ff}16' selector='plotSpace:shouldHandlePointingDeviceUpEvent:atPoint:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='id' index='1' type='@' name='event'/>
<arg declared_type='CGPoint' index='2' type='{CGPoint=ff}' name='point'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type='B24@0:4@8f12{CGPoint=ff}16' selector='plotSpace:shouldScaleBy:aboutPoint:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='CGFloat' index='1' type='f' name='interactionScale'/>
<arg declared_type='CGPoint' index='2' type='{CGPoint=ff}' name='interactionPoint'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type='@20@0:4@8@12i16' selector='plotSpace:willChangePlotRangeTo:forCoordinate:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='CPTPlotRange*' index='1' type='@' name='newRange'/>
<arg declared_type='CPTCoordinate' index='2' type='i' name='coordinate'/>
<retval declared_type='CPTPlotRange*' type='@'/>
</method>
<method type='{CGPoint=ff}20@0:4@8{CGPoint=ff}12' selector='plotSpace:willDisplaceBy:'>
<arg declared_type='CPTPlotSpace*' index='0' type='@' name='space'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='proposedDisplacementVector'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
</informal_protocol>
<informal_protocol name='CPTResponder'>
<method type='B12@0:4@8' selector='pointingDeviceCancelledEvent:'>
<arg declared_type='id' index='0' type='@' name='event'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type='B20@0:4@8{CGPoint=ff}12' selector='pointingDeviceDownEvent:atPoint:'>
<arg declared_type='id' index='0' type='@' name='event'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='interactionPoint'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type='B20@0:4@8{CGPoint=ff}12' selector='pointingDeviceDraggedEvent:atPoint:'>
<arg declared_type='id' index='0' type='@' name='event'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='interactionPoint'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type='B20@0:4@8{CGPoint=ff}12' selector='pointingDeviceUpEvent:atPoint:'>
<arg declared_type='id' index='0' type='@' name='event'/>
<arg declared_type='CGPoint' index='1' type='{CGPoint=ff}' name='interactionPoint'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='CPTScatterPlotDataSource'>
<method type='@16@0:4@8I12' selector='symbolForScatterPlot:recordIndex:'>
<arg declared_type='CPTScatterPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='CPTPlotSymbol*' type='@'/>
</method>
<method type='@20@0:4@8{_NSRange=II}12' selector='symbolsForScatterPlot:recordIndexRange:'>
<arg declared_type='CPTScatterPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSRange' index='1' type='{_NSRange=II}' name='indexRange'/>
<retval declared_type='NSArray*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='CPTScatterPlotDelegate'>
<method type='v16@0:4@8I12' selector='scatterPlot:plotSymbolWasSelectedAtRecordIndex:'>
<arg declared_type='CPTScatterPlot*' index='0' type='@' name='plot'/>
<arg declared_type='NSUInteger' index='1' type='I' name='index'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
</signatures>
